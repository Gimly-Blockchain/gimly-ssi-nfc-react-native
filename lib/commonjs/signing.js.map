{"version":3,"names":["Sign","getSuite","keyId","controller","keyPair","Ed25519VerificationKey2020","from","type","id","publicKeyMultibase","suite","Ed25519Signature2020","key","date","documentLoader","url","startsWith","didResolver","UniResolver","result","resolve","didResolutionMetadata","error","didDocument","Error","framed","contextUrl","documentUrl","document","loader","documentLoaderXhr","apply","jsonld","response","credential","unsignedCredential","signedCredential","vc","issue","err","message","presentation","challenge","signedPresentation","signPresentation","verfyCredential","signedVC","verifyCredential"],"sources":["signing.tsx"],"sourcesContent":["// @ts-ignore\nimport vc from '@digitalcredentials/vc';\n// @ts-ignore\nimport { Ed25519VerificationKey2020 } from '@digitalcredentials/ed25519-verification-key-2020';\n// @ts-ignore\nimport { Ed25519Signature2020 } from '@digitalcredentials/ed25519-signature-2020';\n// @ts-ignore\nimport { UniResolver } from '@sphereon/did-uni-client';\n// @ts-ignore\nimport documentLoaderXhr from '@digitalcredentials/jsonld/lib/documentLoaders/xhr';\n// @ts-ignore\nimport { frame } from '@digitalcredentials/jsonld';\n// @ts-ignore\nimport jsonld from '@digitalcredentials/jsonld';\n\nimport type { Credential, Presentation } from './types';\n\nexport default class Sign {\n    /**\n   * Gets the suit required to sign\n   *\n   * @param\n   * @returns The suit\n   */\n    private static async getSuite(keyId: string) {\n    // TODO This suite is just for testing purposes\n        const controller = 'https://example.edu/issuers/565049';\n\n        const keyPair = await Ed25519VerificationKey2020.from({\n            type: 'Ed25519VerificationKey2020',\n            controller,\n            id: controller + '#' + keyId,\n            publicKeyMultibase: keyId,\n        });\n\n        const suite = new Ed25519Signature2020({ key: keyPair });\n        suite.date = '2010-01-01T19:23:24Z';\n\n        return suite;\n    }\n\n    /**\n   * Gets the document\n   *\n   * @param url the document url\n   * @returns The suit\n   */\n    private static async documentLoader(url: string) {\n        if (url.startsWith('did:')) {\n            const didResolver = new UniResolver();\n            const result = await didResolver.resolve(url);\n\n            if (result.didResolutionMetadata.error || !result.didDocument) {\n                throw new Error(`Unable to resolve DID: ${url}`);\n            }\n\n            const framed = await frame(\n                'https://identity.foundation/EcdsaSecp256k1RecoverySignature2020/lds-ecdsa-secp256k1-recovery2020-0.0.jsonld',\n                {\n                    '@context': result.didDocument['@context'],\n                    '@embed': '@never',\n                    'id': url,\n                }\n            );\n\n            return {\n                contextUrl: null,\n                documentUrl: url,\n                document: framed,\n            };\n        }\n\n        const loader = documentLoaderXhr.apply(jsonld, []);\n        const response = await loader(url);\n\n        return response;\n    }\n\n    /**\n   * Sign the credential\n   *\n   * @param\n   * @returns The signed credential\n   */\n    public static async credential(unsignedCredential: Credential, keyId: string): Promise<any> {\n        const suite = await this.getSuite(keyId);\n\n        try {\n            const signedCredential = await vc.issue({\n                credential: unsignedCredential,\n                suite,\n                documentLoader: this.documentLoader,\n            });\n\n            return signedCredential;\n        } catch (err: any) { //TODO improve error handling\n            throw new Error(err.message);\n        }\n    }\n\n    /**\n   * Sign the presentation\n   *\n   * @param\n   * @returns The signed presentation\n   */\n    public static async presentation(presentation: Presentation, keyId: string): Promise<any> {\n        const suite = await this.getSuite(keyId);\n        const challenge = '1234';\n\n        try {\n            const signedPresentation = await vc.signPresentation({\n                presentation,\n                suite,\n                challenge,\n                documentLoader: this.documentLoader,\n            });\n\n            return signedPresentation;\n        } catch (err: any) { //TODO improve error handling\n            throw new Error(err.message);\n        }\n    }\n\n    /**\n   * Verify a credential\n   *\n   * Currently in development\n   *\n   * @param signedVC a signed credential\n   * @returns wheter the credential is valid or not\n   */\n    public static async verfyCredential(signedVC: any, keyId: string): Promise<any> {\n        const suite = await this.getSuite(keyId);\n\n        const result = await vc.verifyCredential({\n            credential: signedVC,\n            suite,\n            documentLoader: this.documentLoader,\n        });\n\n        return result;\n    }\n}\n"],"mappings":"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"}