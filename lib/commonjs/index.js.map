{"version":3,"names":["NfcSdkModule","TangemSdk","NfcSdk","scanCard","initialMessage","data","cardId","batchId","cardPublicKey","cardPublicKeyMultibase","supportedCurves","curves","firmwareVersion","major","minor","type","hotFix","patch","cardInfo","response","createKey","curve","Error","ellipticCurve","EllipticCurve","Secp256k1","Ed25519","Secp256r1","createWallet","keyInfo","publicKeyMultibase","wallet","publicKey","index","id","keys","keyId","deactivateKey","purgeWallet","getKeys","wallets","map","length","getKey","keyResult","filtered","filter","k","signUsingKey","signRequest","inputs","hashes","input","signHashes","signatures","signature","encoding","output","signCredential","signCredentialRequest","signedCredential","Sign","credential","signPresentation","signPresentationRequest","signedPresentation","presentation","storeCredential","fileName","sCredential","JSON","stringify","hexEncode","files","readFiles","fileCounter","Promise","resolve","setTimeout","startingSignature","finalizingSignature","prepareHashes","file","counter","fileVisibility","FileVisibility","Public","writeFiles","deleteStoredCredential","indices","deleteFiles","getStoredCredentials","credentials","item","decodeData","hexDecode","parse","getStoredCredential","setAccessCode","accessCode","setPasscode","passcode","resetUserCodes","json","split","_c","i","charCodeAt","toString","slice","join","hexes","match","c","String","fromCharCode","parseInt"],"sources":["index.tsx"],"sourcesContent":["import TangemSdk from 'tangem-sdk';\nimport { EllipticCurve, FileVisibility, OwnerFile } from 'tangem-sdk';\nimport type {\n    CardInfo,\n    CardInfoResult,\n    KeyInfo,\n    KeyResults,\n    SignCredentialRequest,\n    SignCredentialResponse,\n    SignOutputFromInput,\n    SignPresentationRequest,\n    SignPresentationResponse,\n    SignRequest,\n    SignResponse,\n    StoredCredentialsResponse,\n    WalletType,\n    SsiType,\n    FilesType,\n    Message,\n    SuccessResponse,\n} from './types';\nimport Sign from './signing';\n\nexport const NfcSdkModule = TangemSdk;\n\nexport default class NfcSdk {\n  /**\n   *  Constructor for reusable parameters\n   *\n   * @param cardId the card identifier is store globally\n   * @returns nothing\n   */\n  public static cardId: string;\n  public static keyId: string;\n\n  /**\n   * Scan the NFC card\n   *\n   * @param initialMessage The message to display\n   * @returns The card information retrieved with the scan\n   */\n  static async scanCard(initialMessage?: Message): Promise<CardInfoResult> {\n      const data = await TangemSdk.scanCard(initialMessage);\n\n      const {\n          cardId,\n          batchId,\n          cardPublicKey: cardPublicKeyMultibase,\n          supportedCurves: curves,\n          firmwareVersion: { major, minor, type, hotFix: patch },\n      } = data;\n\n      const cardInfo: CardInfo = {\n          curves,\n          firmwareVersion: {\n              major,\n              minor,\n              type,\n              patch,\n          },\n      };\n\n      NfcSdk.cardId = cardId;\n\n      const response: CardInfoResult = {\n          cardId,\n          batchId,\n          cardPublicKeyMultibase,\n          cardInfo,\n      };\n\n      return response;\n  }\n\n  /**\n   * Create an asymmetric keypair on the NFC card\n   *\n   * @param curve A string with the elliptic Curve\n   * @returns The results of the created key\n   */\n  static async createKey(curve: string): Promise<KeyResults> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      let ellipticCurve = EllipticCurve.Secp256k1; //default\n\n      if (curve === 'secp256k1') ellipticCurve = EllipticCurve.Secp256k1;\n      if (curve === 'ed25519') ellipticCurve = EllipticCurve.Ed25519;\n      if (curve === 'secp256r1') ellipticCurve = EllipticCurve.Secp256r1;\n\n      const data = await TangemSdk.createWallet(ellipticCurve, NfcSdk.cardId);\n\n      const keyInfo: KeyInfo = {\n          publicKeyMultibase: data.wallet.publicKey,\n          index: data.wallet.index,\n      };\n\n      const response: KeyResults = {\n          id: data.cardId,\n          keys: [keyInfo],\n      };\n\n      NfcSdk.keyId = keyInfo.publicKeyMultibase;\n\n      return response;\n  }\n\n  /**\n   * Deactivate a key by card index, public key, or DID key\n   *\n   * @param keyId The Key index, public key, or DID/Verification method Key ID\n   * @returns null\n   */\n  static async deactivateKey(keyId?: string): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const response = await TangemSdk.purgeWallet(\n          keyId || NfcSdk.keyId,\n          NfcSdk.cardId\n      );\n\n      return response;\n  }\n\n  /**\n   * Get all the keys of the card\n   *\n   * @param initialMessage The message to display\n   * @returns The keys retrieved from the card\n   */\n  static async getKeys(initialMessage: Message): Promise<KeyResults> {\n      const data = await TangemSdk.scanCard(initialMessage);\n\n      const keys = data.wallets\n          ? data.wallets.map((wallet: { publicKey: any; index: any }) => {\n              const keyInfo: KeyInfo = {\n                  publicKeyMultibase: wallet.publicKey,\n                  index: wallet.index,\n              };\n\n              return keyInfo;\n          })\n          : [];\n\n      const response: KeyResults = {\n          id: data.cardId,\n          keys,\n      };\n\n      if (response.keys.length > 0) {\n          NfcSdk.keyId = response.keys[0].publicKeyMultibase;\n      }\n\n      return response;\n  }\n\n  /**\n   * Get a key by keyId\n   *\n   * @param initialMessage The message to display\n   * @param keyId The Id of a key\n   * @returns The key retrieved from the card\n   */\n  static async getKey(\n      initialMessage: Message,\n      keyId?: string\n  ): Promise<KeyInfo | null> {\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const keyResult: KeyResults = await this.getKeys(initialMessage);\n      const { keys } = keyResult;\n\n      const filtered = keys.filter(\n          (k: KeyInfo) => k.publicKeyMultibase === (keyId || NfcSdk.keyId)\n      );\n\n      if (filtered.length === 0) return null;\n\n      const keyInfo: KeyInfo = {\n          publicKeyMultibase: filtered[0].publicKeyMultibase,\n          index: filtered[0].index,\n      };\n\n      return keyInfo;\n  }\n\n  /**\n   * Sign one or more inputs using the private key stored on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signRequest Sign one or more inputs, typically hashes in hex format\n   * @returns A successful response after signing or an error\n   */\n  static async signUsingKey(\n      signRequest: SignRequest,\n      keyId?: string\n  ): Promise<SignResponse> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const { inputs } = signRequest;\n      const hashes = inputs.map((input) => input.data);\n      const data = await TangemSdk.signHashes(\n          hashes,\n          keyId || NfcSdk.keyId,\n          NfcSdk.cardId\n      );\n\n      // @ts-ignore\n      const signatures: SignOutputFromInput[] = data.signatures.map(\n          (signature: string, index: number) => {\n              return {\n                  input: { data: hashes[index], encoding: 'hex' },\n                  output: { data: signature, encoding: 'hex' },\n              };\n          }\n      );\n\n      const response: SignResponse = {\n          publicKeyMultibase: keyId,\n          signatures,\n      };\n\n      return response;\n  }\n\n  /**\n   * Add a proof to the supplied credential, using the private key on the NFC card and thus making\n   * it a Verifiable Credential. It allows for optional storage of the VC on the NFC card\n   *\n   * @param signCredentialRequest Signs one or more inputs, typically hashes in hex format\n   * @param keyId The Id of a key\n   * @returns A success response after signing\n   */\n  static async signCredential(\n      signCredentialRequest: SignCredentialRequest,\n      keyId?: string\n  ): Promise<SignCredentialResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const signedCredential = Sign.credential(signCredentialRequest.credential, keyId || NfcSdk.keyId);\n\n      return signedCredential;\n  }\n\n  /**\n   * Sign the supplied presentation using the key on the NFC card, adding a proof and making it\n   * a verifiable presentation\n   *\n   * @param signPresentationRequest Signs a presentation\n   * @param keyId The Id of a key\n   * @returns A successful response after signing\n   */\n  static async signPresentation(\n      signPresentationRequest: SignPresentationRequest,\n      keyId?: string\n  ): Promise<SignPresentationResponse> {\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const signedPresentation = Sign.presentation(\n          signPresentationRequest.presentation,\n          keyId || NfcSdk.keyId\n      );\n      return signedPresentation;\n  }\n\n  /**\n   * Store a credential\n   *\n   * @param credential The credential to be stored\n   * @param fileName The file name\n   * @returns A success response or null\n   */\n  static async storeCredential(\n      credential: any,\n      fileName: string\n  ): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const sCredential = JSON.stringify(credential);\n      const data = hexEncode(sCredential);\n\n      const files = await TangemSdk.readFiles(true);\n      // @ts-ignore\n      const fileCounter = files.length + 1;\n\n      await new Promise((resolve) => setTimeout(resolve, 4000));\n\n      const { startingSignature, finalizingSignature } =\n      await TangemSdk.prepareHashes(\n          NfcSdk.cardId,\n          data,\n          fileCounter,\n          fileName,\n          '11121314151617184771ED81F2BACF57479E4735EB1405083927372D40DA9E92' // TODO hardcoded key due to a Tangem SDK limitation\n      );\n\n      const file: OwnerFile = {\n          startingSignature,\n          finalizingSignature,\n          data,\n          fileName,\n          counter: fileCounter,\n          fileVisibility: FileVisibility.Public,\n      };\n\n      const response = await TangemSdk.writeFiles([file], NfcSdk.cardId);\n\n      return response;\n  }\n\n  /**\n   * Delete a specific stored Verifiable Credential\n   *\n   * @param fileName The file name of a credential\n   * @returns A successful response or null\n   */\n  static async deleteStoredCredential(\n      fileName: string\n  ): Promise<SuccessResponse | null> {\n      const files = await TangemSdk.readFiles(true, fileName);\n      // @ts-ignore\n\n      const indices = files.map((file: { index: any }) => file.index);\n\n      await TangemSdk.deleteFiles(indices);\n\n      const response: SuccessResponse = {\n          cardId: NfcSdk.cardId,\n      };\n\n      return response;\n  }\n\n  /**\n   * Return all the stored Verifiable Credentials\n   *\n   * @returns The stored credentials\n   */\n  static async getStoredCredentials(): Promise<StoredCredentialsResponse> {\n      const files = await TangemSdk.readFiles(true);\n\n      const credentials = files\n      // @ts-ignore\n          .map((item: { data: string; name: string }) => {\n              try {\n                  const decodeData = hexDecode(item.data);\n                  return JSON.parse(decodeData);\n              } catch {\n                  return null;\n              }\n          })\n          .filter((item: { data: string; name: string }) => item);\n\n      const response: StoredCredentialsResponse = { credentials };\n\n      return response;\n  }\n\n  /**\n   * Return a specific stored Verifiable Credential\n   *\n   * @param fileName The file name of a credential\n   * @returns The stored credential or null\n   */\n  static async getStoredCredential(\n      fileName: string\n  ): Promise<StoredCredentialsResponse | null> {\n      const files = await TangemSdk.readFiles(true, fileName);\n\n      const credentials = files\n      // @ts-ignore\n          .map((item: { data: string; name: string }) => {\n              try {\n                  const decodeData = hexDecode(item.data);\n                  return JSON.parse(decodeData);\n              } catch {\n                  return null;\n              }\n          })\n          .filter((item: { data: string; name: string }) => item);\n\n      const response: StoredCredentialsResponse = { credentials };\n\n      return response;\n  }\n\n  /**\n   * Set an access code on the card, if set all commands, including Scan Card, will require to submit this code\n   *\n   * @param accessCode The access code\n   * @returns A success response or null\n   */\n  static async setAccessCode(\n      accessCode: string\n  ): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const data = await TangemSdk.setAccessCode(accessCode, NfcSdk.cardId);\n\n      return data;\n  }\n\n  /**\n   * Set a passcode. Passcode protects signing and operations that can alter security parameters\n   *\n   * @param passcode The pass code\n   * @returns A success response or null\n   */\n  static async setPasscode(passcode: string): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const data = await TangemSdk.setPasscode(passcode, NfcSdk.cardId);\n\n      return data;\n  }\n\n  /**\n   * Reset both access code and passcode if they were set\n   *\n   * @returns A success response or null\n   */\n  static async resetUserCodes(): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const data = await TangemSdk.resetUserCodes(NfcSdk.cardId);\n\n      return data;\n  }\n\n  /**\n   * Exposes public methods related to wallet operations\n   */\n  public static wallet: WalletType = {\n      scanCard: NfcSdk.scanCard,\n      setAccessCode: NfcSdk.setAccessCode,\n      setPasscode: NfcSdk.setPasscode,\n      resetUserCodes: NfcSdk.resetUserCodes,\n      createKey: NfcSdk.createKey,\n      getKeys: NfcSdk.getKeys,\n      getKey: NfcSdk.getKey,\n      deactivateKey: NfcSdk.deactivateKey,\n  };\n\n  /**\n   * Exposes public methods related to ssi operation\n   */\n  public static ssi: SsiType = {\n      signUsingKey: NfcSdk.signUsingKey,\n      signCredential: NfcSdk.signCredential,\n      signPresentation: NfcSdk.signPresentation,\n  };\n\n  /**\n   * Exposes public methods related to wallet operations\n   */\n  public static files: FilesType = {\n      storeCredential: NfcSdk.storeCredential,\n      getStoredCredentials: NfcSdk.getStoredCredentials,\n      getStoredCredential: NfcSdk.getStoredCredential,\n      deleteStoredCredential: NfcSdk.deleteStoredCredential,\n  };\n}\n\n// TODO: REFACTOR. Move the following 3 methods to a separate file with common functions\nconst hexEncode = (input: string): string => {\n    const json = JSON.stringify(input);\n    const response = json\n        .split('')\n        .map((_c, i) => ('000' + json.charCodeAt(i).toString(16)).slice(-4))\n        .join('');\n\n    return response;\n};\n\nconst hexDecode = (input: string): string => {\n    const hexes = input.match(/.{1,4}/g) || [];\n    const response = hexes\n        .map((c) => String.fromCharCode(parseInt(c, 16)))\n        .join('');\n\n    return response;\n};\n\nexport * from './types';\nexport { EllipticCurve } from 'tangem-sdk';\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAqBA;;AA6eA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;;;;;;;;;AA3eO,MAAMA,YAAY,GAAGC,kBAArB;;;AAEQ,MAAMC,MAAN,CAAa;EAC1B;AACF;AACA;AACA;AACA;AACA;;EAIE;AACF;AACA;AACA;AACA;AACA;EACuB,aAARC,QAAQ,CAACC,cAAD,EAAoD;IACrE,MAAMC,IAAI,GAAG,MAAMJ,mBAAUE,QAAV,CAAmBC,cAAnB,CAAnB;IAEA,MAAM;MACFE,MADE;MAEFC,OAFE;MAGFC,aAAa,EAAEC,sBAHb;MAIFC,eAAe,EAAEC,MAJf;MAKFC,eAAe,EAAE;QAAEC,KAAF;QAASC,KAAT;QAAgBC,IAAhB;QAAsBC,MAAM,EAAEC;MAA9B;IALf,IAMFZ,IANJ;IAQA,MAAMa,QAAkB,GAAG;MACvBP,MADuB;MAEvBC,eAAe,EAAE;QACbC,KADa;QAEbC,KAFa;QAGbC,IAHa;QAIbE;MAJa;IAFM,CAA3B;IAUAf,MAAM,CAACI,MAAP,GAAgBA,MAAhB;IAEA,MAAMa,QAAwB,GAAG;MAC7Bb,MAD6B;MAE7BC,OAF6B;MAG7BE,sBAH6B;MAI7BS;IAJ6B,CAAjC;IAOA,OAAOC,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EACwB,aAATC,SAAS,CAACC,KAAD,EAAqC;IACvD,IAAI,CAACnB,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,IAAIC,aAAa,GAAGC,yBAAcC,SAAlC,CALuD,CAKV;;IAE7C,IAAIJ,KAAK,KAAK,WAAd,EAA2BE,aAAa,GAAGC,yBAAcC,SAA9B;IAC3B,IAAIJ,KAAK,KAAK,SAAd,EAAyBE,aAAa,GAAGC,yBAAcE,OAA9B;IACzB,IAAIL,KAAK,KAAK,WAAd,EAA2BE,aAAa,GAAGC,yBAAcG,SAA9B;IAE3B,MAAMtB,IAAI,GAAG,MAAMJ,mBAAU2B,YAAV,CAAuBL,aAAvB,EAAsCrB,MAAM,CAACI,MAA7C,CAAnB;IAEA,MAAMuB,OAAgB,GAAG;MACrBC,kBAAkB,EAAEzB,IAAI,CAAC0B,MAAL,CAAYC,SADX;MAErBC,KAAK,EAAE5B,IAAI,CAAC0B,MAAL,CAAYE;IAFE,CAAzB;IAKA,MAAMd,QAAoB,GAAG;MACzBe,EAAE,EAAE7B,IAAI,CAACC,MADgB;MAEzB6B,IAAI,EAAE,CAACN,OAAD;IAFmB,CAA7B;IAKA3B,MAAM,CAACkC,KAAP,GAAeP,OAAO,CAACC,kBAAvB;IAEA,OAAOX,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC4B,aAAbkB,aAAa,CAACD,KAAD,EAAkD;IACxE,IAAI,CAAClC,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,IAAI,CAACc,KAAD,IAAU,CAAClC,MAAM,CAACkC,KAAtB,EAA6B;MACzB,MAAM,IAAId,KAAJ,CAAU,8CAAV,CAAN;IACH;;IAED,MAAMH,QAAQ,GAAG,MAAMlB,mBAAUqC,WAAV,CACnBF,KAAK,IAAIlC,MAAM,CAACkC,KADG,EAEnBlC,MAAM,CAACI,MAFY,CAAvB;IAKA,OAAOa,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EACsB,aAAPoB,OAAO,CAACnC,cAAD,EAA+C;IAC/D,MAAMC,IAAI,GAAG,MAAMJ,mBAAUE,QAAV,CAAmBC,cAAnB,CAAnB;IAEA,MAAM+B,IAAI,GAAG9B,IAAI,CAACmC,OAAL,GACPnC,IAAI,CAACmC,OAAL,CAAaC,GAAb,CAAkBV,MAAD,IAA4C;MAC3D,MAAMF,OAAgB,GAAG;QACrBC,kBAAkB,EAAEC,MAAM,CAACC,SADN;QAErBC,KAAK,EAAEF,MAAM,CAACE;MAFO,CAAzB;MAKA,OAAOJ,OAAP;IACH,CAPC,CADO,GASP,EATN;IAWA,MAAMV,QAAoB,GAAG;MACzBe,EAAE,EAAE7B,IAAI,CAACC,MADgB;MAEzB6B;IAFyB,CAA7B;;IAKA,IAAIhB,QAAQ,CAACgB,IAAT,CAAcO,MAAd,GAAuB,CAA3B,EAA8B;MAC1BxC,MAAM,CAACkC,KAAP,GAAejB,QAAQ,CAACgB,IAAT,CAAc,CAAd,EAAiBL,kBAAhC;IACH;;IAED,OAAOX,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACqB,aAANwB,MAAM,CACfvC,cADe,EAEfgC,KAFe,EAGQ;IACvB,IAAI,CAACA,KAAD,IAAU,CAAClC,MAAM,CAACkC,KAAtB,EAA6B;MACzB,MAAM,IAAId,KAAJ,CAAU,8CAAV,CAAN;IACH;;IAED,MAAMsB,SAAqB,GAAG,MAAM,KAAKL,OAAL,CAAanC,cAAb,CAApC;IACA,MAAM;MAAE+B;IAAF,IAAWS,SAAjB;IAEA,MAAMC,QAAQ,GAAGV,IAAI,CAACW,MAAL,CACZC,CAAD,IAAgBA,CAAC,CAACjB,kBAAF,MAA0BM,KAAK,IAAIlC,MAAM,CAACkC,KAA1C,CADH,CAAjB;IAIA,IAAIS,QAAQ,CAACH,MAAT,KAAoB,CAAxB,EAA2B,OAAO,IAAP;IAE3B,MAAMb,OAAgB,GAAG;MACrBC,kBAAkB,EAAEe,QAAQ,CAAC,CAAD,CAAR,CAAYf,kBADX;MAErBG,KAAK,EAAEY,QAAQ,CAAC,CAAD,CAAR,CAAYZ;IAFE,CAAzB;IAKA,OAAOJ,OAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EAC2B,aAAZmB,YAAY,CACrBC,WADqB,EAErBb,KAFqB,EAGA;IACrB,IAAI,CAAClC,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,IAAI,CAACc,KAAD,IAAU,CAAClC,MAAM,CAACkC,KAAtB,EAA6B;MACzB,MAAM,IAAId,KAAJ,CAAU,8CAAV,CAAN;IACH;;IAED,MAAM;MAAE4B;IAAF,IAAaD,WAAnB;IACA,MAAME,MAAM,GAAGD,MAAM,CAACT,GAAP,CAAYW,KAAD,IAAWA,KAAK,CAAC/C,IAA5B,CAAf;IACA,MAAMA,IAAI,GAAG,MAAMJ,mBAAUoD,UAAV,CACfF,MADe,EAEff,KAAK,IAAIlC,MAAM,CAACkC,KAFD,EAGflC,MAAM,CAACI,MAHQ,CAAnB,CAXqB,CAiBrB;;IACA,MAAMgD,UAAiC,GAAGjD,IAAI,CAACiD,UAAL,CAAgBb,GAAhB,CACtC,CAACc,SAAD,EAAoBtB,KAApB,KAAsC;MAClC,OAAO;QACHmB,KAAK,EAAE;UAAE/C,IAAI,EAAE8C,MAAM,CAAClB,KAAD,CAAd;UAAuBuB,QAAQ,EAAE;QAAjC,CADJ;QAEHC,MAAM,EAAE;UAAEpD,IAAI,EAAEkD,SAAR;UAAmBC,QAAQ,EAAE;QAA7B;MAFL,CAAP;IAIH,CANqC,CAA1C;IASA,MAAMrC,QAAsB,GAAG;MAC3BW,kBAAkB,EAAEM,KADO;MAE3BkB;IAF2B,CAA/B;IAKA,OAAOnC,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC6B,aAAduC,cAAc,CACvBC,qBADuB,EAEvBvB,KAFuB,EAGe;IACtC,IAAI,CAAClC,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,IAAI,CAACc,KAAD,IAAU,CAAClC,MAAM,CAACkC,KAAtB,EAA6B;MACzB,MAAM,IAAId,KAAJ,CAAU,8CAAV,CAAN;IACH;;IAED,MAAMsC,gBAAgB,GAAGC,iBAAKC,UAAL,CAAgBH,qBAAqB,CAACG,UAAtC,EAAkD1B,KAAK,IAAIlC,MAAM,CAACkC,KAAlE,CAAzB;;IAEA,OAAOwB,gBAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC+B,aAAhBG,gBAAgB,CACzBC,uBADyB,EAEzB5B,KAFyB,EAGQ;IACjC,IAAI,CAACA,KAAD,IAAU,CAAClC,MAAM,CAACkC,KAAtB,EAA6B;MACzB,MAAM,IAAId,KAAJ,CAAU,8CAAV,CAAN;IACH;;IAED,MAAM2C,kBAAkB,GAAGJ,iBAAKK,YAAL,CACvBF,uBAAuB,CAACE,YADD,EAEvB9B,KAAK,IAAIlC,MAAM,CAACkC,KAFO,CAA3B;;IAIA,OAAO6B,kBAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EAC8B,aAAfE,eAAe,CACxBL,UADwB,EAExBM,QAFwB,EAGO;IAC/B,IAAI,CAAClE,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,MAAM+C,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeT,UAAf,CAApB;IACA,MAAMzD,IAAI,GAAGmE,SAAS,CAACH,WAAD,CAAtB;IAEA,MAAMI,KAAK,GAAG,MAAMxE,mBAAUyE,SAAV,CAAoB,IAApB,CAApB,CAR+B,CAS/B;;IACA,MAAMC,WAAW,GAAGF,KAAK,CAAC/B,MAAN,GAAe,CAAnC;IAEA,MAAM,IAAIkC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAN;IAEA,MAAM;MAAEE,iBAAF;MAAqBC;IAArB,IACN,MAAM/E,mBAAUgF,aAAV,CACF/E,MAAM,CAACI,MADL,EAEFD,IAFE,EAGFsE,WAHE,EAIFP,QAJE,EAKF,kEALE,CAKiE;IALjE,CADN;IASA,MAAMc,IAAe,GAAG;MACpBH,iBADoB;MAEpBC,mBAFoB;MAGpB3E,IAHoB;MAIpB+D,QAJoB;MAKpBe,OAAO,EAAER,WALW;MAMpBS,cAAc,EAAEC,0BAAeC;IANX,CAAxB;IASA,MAAMnE,QAAQ,GAAG,MAAMlB,mBAAUsF,UAAV,CAAqB,CAACL,IAAD,CAArB,EAA6BhF,MAAM,CAACI,MAApC,CAAvB;IAEA,OAAOa,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EACqC,aAAtBqE,sBAAsB,CAC/BpB,QAD+B,EAEA;IAC/B,MAAMK,KAAK,GAAG,MAAMxE,mBAAUyE,SAAV,CAAoB,IAApB,EAA0BN,QAA1B,CAApB,CAD+B,CAE/B;;IAEA,MAAMqB,OAAO,GAAGhB,KAAK,CAAChC,GAAN,CAAWyC,IAAD,IAA0BA,IAAI,CAACjD,KAAzC,CAAhB;IAEA,MAAMhC,mBAAUyF,WAAV,CAAsBD,OAAtB,CAAN;IAEA,MAAMtE,QAAyB,GAAG;MAC9Bb,MAAM,EAAEJ,MAAM,CAACI;IADe,CAAlC;IAIA,OAAOa,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;;;EACmC,aAApBwE,oBAAoB,GAAuC;IACpE,MAAMlB,KAAK,GAAG,MAAMxE,mBAAUyE,SAAV,CAAoB,IAApB,CAApB;IAEA,MAAMkB,WAAW,GAAGnB,KAAK,CACzB;IADyB,CAEpBhC,GAFe,CAEVoD,IAAD,IAA0C;MAC3C,IAAI;QACA,MAAMC,UAAU,GAAGC,SAAS,CAACF,IAAI,CAACxF,IAAN,CAA5B;QACA,OAAOiE,IAAI,CAAC0B,KAAL,CAAWF,UAAX,CAAP;MACH,CAHD,CAGE,MAAM;QACJ,OAAO,IAAP;MACH;IACJ,CATe,EAUfhD,MAVe,CAUP+C,IAAD,IAA0CA,IAVlC,CAApB;IAYA,MAAM1E,QAAmC,GAAG;MAAEyE;IAAF,CAA5C;IAEA,OAAOzE,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EACkC,aAAnB8E,mBAAmB,CAC5B7B,QAD4B,EAEa;IACzC,MAAMK,KAAK,GAAG,MAAMxE,mBAAUyE,SAAV,CAAoB,IAApB,EAA0BN,QAA1B,CAApB;IAEA,MAAMwB,WAAW,GAAGnB,KAAK,CACzB;IADyB,CAEpBhC,GAFe,CAEVoD,IAAD,IAA0C;MAC3C,IAAI;QACA,MAAMC,UAAU,GAAGC,SAAS,CAACF,IAAI,CAACxF,IAAN,CAA5B;QACA,OAAOiE,IAAI,CAAC0B,KAAL,CAAWF,UAAX,CAAP;MACH,CAHD,CAGE,MAAM;QACJ,OAAO,IAAP;MACH;IACJ,CATe,EAUfhD,MAVe,CAUP+C,IAAD,IAA0CA,IAVlC,CAApB;IAYA,MAAM1E,QAAmC,GAAG;MAAEyE;IAAF,CAA5C;IAEA,OAAOzE,QAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC4B,aAAb+E,aAAa,CACtBC,UADsB,EAES;IAC/B,IAAI,CAACjG,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,MAAMjB,IAAI,GAAG,MAAMJ,mBAAUiG,aAAV,CAAwBC,UAAxB,EAAoCjG,MAAM,CAACI,MAA3C,CAAnB;IAEA,OAAOD,IAAP;EACH;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC0B,aAAX+F,WAAW,CAACC,QAAD,EAAoD;IACxE,IAAI,CAACnG,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,MAAMjB,IAAI,GAAG,MAAMJ,mBAAUmG,WAAV,CAAsBC,QAAtB,EAAgCnG,MAAM,CAACI,MAAvC,CAAnB;IAEA,OAAOD,IAAP;EACH;EAED;AACF;AACA;AACA;AACA;;;EAC6B,aAAdiG,cAAc,GAAoC;IAC3D,IAAI,CAACpG,MAAM,CAACI,MAAZ,EAAoB;MAChB,MAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;IACH;;IAED,MAAMjB,IAAI,GAAG,MAAMJ,mBAAUqG,cAAV,CAAyBpG,MAAM,CAACI,MAAhC,CAAnB;IAEA,OAAOD,IAAP;EACH;EAED;AACF;AACA;;;AArb4B,C,CAqd5B;;;;;gBArdqBH,M;;gBAAAA,M;;gBAAAA,M,YAsbgB;EAC/BC,QAAQ,EAAED,MAAM,CAACC,QADc;EAE/B+F,aAAa,EAAEhG,MAAM,CAACgG,aAFS;EAG/BE,WAAW,EAAElG,MAAM,CAACkG,WAHW;EAI/BE,cAAc,EAAEpG,MAAM,CAACoG,cAJQ;EAK/BlF,SAAS,EAAElB,MAAM,CAACkB,SALa;EAM/BmB,OAAO,EAAErC,MAAM,CAACqC,OANe;EAO/BI,MAAM,EAAEzC,MAAM,CAACyC,MAPgB;EAQ/BN,aAAa,EAAEnC,MAAM,CAACmC;AARS,C;;gBAtbhBnC,M,SAocU;EACzB8C,YAAY,EAAE9C,MAAM,CAAC8C,YADI;EAEzBU,cAAc,EAAExD,MAAM,CAACwD,cAFE;EAGzBK,gBAAgB,EAAE7D,MAAM,CAAC6D;AAHA,C;;gBApcV7D,M,WA6cc;EAC7BiE,eAAe,EAAEjE,MAAM,CAACiE,eADK;EAE7BwB,oBAAoB,EAAEzF,MAAM,CAACyF,oBAFA;EAG7BM,mBAAmB,EAAE/F,MAAM,CAAC+F,mBAHC;EAI7BT,sBAAsB,EAAEtF,MAAM,CAACsF;AAJF,C;;AASnC,MAAMhB,SAAS,GAAIpB,KAAD,IAA2B;EACzC,MAAMmD,IAAI,GAAGjC,IAAI,CAACC,SAAL,CAAenB,KAAf,CAAb;EACA,MAAMjC,QAAQ,GAAGoF,IAAI,CAChBC,KADY,CACN,EADM,EAEZ/D,GAFY,CAER,CAACgE,EAAD,EAAKC,CAAL,KAAW,CAAC,QAAQH,IAAI,CAACI,UAAL,CAAgBD,CAAhB,EAAmBE,QAAnB,CAA4B,EAA5B,CAAT,EAA0CC,KAA1C,CAAgD,CAAC,CAAjD,CAFH,EAGZC,IAHY,CAGP,EAHO,CAAjB;EAKA,OAAO3F,QAAP;AACH,CARD;;AAUA,MAAM4E,SAAS,GAAI3C,KAAD,IAA2B;EACzC,MAAM2D,KAAK,GAAG3D,KAAK,CAAC4D,KAAN,CAAY,SAAZ,KAA0B,EAAxC;EACA,MAAM7F,QAAQ,GAAG4F,KAAK,CACjBtE,GADY,CACPwE,CAAD,IAAOC,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACH,CAAD,EAAI,EAAJ,CAA5B,CADC,EAEZH,IAFY,CAEP,EAFO,CAAjB;EAIA,OAAO3F,QAAP;AACH,CAPD"}