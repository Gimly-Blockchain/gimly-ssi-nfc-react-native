{"version":3,"names":["vc","Ed25519VerificationKey2020","Ed25519Signature2020","UniResolver","documentLoaderXhr","frame","jsonld","Sign","getSuite","keyId","controller","keyPair","from","type","id","publicKeyMultibase","suite","key","date","documentLoader","url","startsWith","didResolver","result","resolve","didResolutionMetadata","error","didDocument","Error","framed","contextUrl","documentUrl","document","loader","apply","response","credential","unsignedCredential","signedCredential","issue","err","message","presentation","challenge","signedPresentation","signPresentation","verfyCredential","signedVC","verifyCredential"],"sources":["signing.tsx"],"sourcesContent":["// @ts-ignore\nimport vc from '@digitalcredentials/vc';\n// @ts-ignore\nimport { Ed25519VerificationKey2020 } from '@digitalcredentials/ed25519-verification-key-2020';\n// @ts-ignore\nimport { Ed25519Signature2020 } from '@digitalcredentials/ed25519-signature-2020';\n// @ts-ignore\nimport { UniResolver } from '@sphereon/did-uni-client';\n// @ts-ignore\nimport documentLoaderXhr from '@digitalcredentials/jsonld/lib/documentLoaders/xhr';\n// @ts-ignore\nimport { frame } from '@digitalcredentials/jsonld';\n// @ts-ignore\nimport jsonld from '@digitalcredentials/jsonld';\n\nimport type { Credential, Presentation } from './types';\n\nexport default class Sign {\n    /**\n   * Gets the suit required to sign\n   *\n   * @param\n   * @returns The suit\n   */\n    private static async getSuite(keyId: string) {\n    // TODO This suite is just for testing purposes\n        const controller = 'https://example.edu/issuers/565049';\n\n        const keyPair = await Ed25519VerificationKey2020.from({\n            type: 'Ed25519VerificationKey2020',\n            controller,\n            id: controller + '#' + keyId,\n            publicKeyMultibase: keyId,\n        });\n\n        const suite = new Ed25519Signature2020({ key: keyPair });\n        suite.date = '2010-01-01T19:23:24Z';\n\n        return suite;\n    }\n\n    /**\n   * Gets the document\n   *\n   * @param url the document url\n   * @returns The suit\n   */\n    private static async documentLoader(url: string) {\n        if (url.startsWith('did:')) {\n            const didResolver = new UniResolver();\n            const result = await didResolver.resolve(url);\n\n            if (result.didResolutionMetadata.error || !result.didDocument) {\n                throw new Error(`Unable to resolve DID: ${url}`);\n            }\n\n            const framed = await frame(\n                'https://identity.foundation/EcdsaSecp256k1RecoverySignature2020/lds-ecdsa-secp256k1-recovery2020-0.0.jsonld',\n                {\n                    '@context': result.didDocument['@context'],\n                    '@embed': '@never',\n                    'id': url,\n                }\n            );\n\n            return {\n                contextUrl: null,\n                documentUrl: url,\n                document: framed,\n            };\n        }\n\n        const loader = documentLoaderXhr.apply(jsonld, []);\n        const response = await loader(url);\n\n        return response;\n    }\n\n    /**\n   * Sign the credential\n   *\n   * @param\n   * @returns The signed credential\n   */\n    public static async credential(unsignedCredential: Credential, keyId: string): Promise<any> {\n        const suite = await this.getSuite(keyId);\n\n        try {\n            const signedCredential = await vc.issue({\n                credential: unsignedCredential,\n                suite,\n                documentLoader: this.documentLoader,\n            });\n\n            return signedCredential;\n        } catch (err: any) { //TODO improve error handling\n            throw new Error(err.message);\n        }\n    }\n\n    /**\n   * Sign the presentation\n   *\n   * @param\n   * @returns The signed presentation\n   */\n    public static async presentation(presentation: Presentation, keyId: string): Promise<any> {\n        const suite = await this.getSuite(keyId);\n        const challenge = '1234';\n\n        try {\n            const signedPresentation = await vc.signPresentation({\n                presentation,\n                suite,\n                challenge,\n                documentLoader: this.documentLoader,\n            });\n\n            return signedPresentation;\n        } catch (err: any) { //TODO improve error handling\n            throw new Error(err.message);\n        }\n    }\n\n    /**\n   * Verify a credential\n   *\n   * Currently in development\n   *\n   * @param signedVC a signed credential\n   * @returns wheter the credential is valid or not\n   */\n    public static async verfyCredential(signedVC: any, keyId: string): Promise<any> {\n        const suite = await this.getSuite(keyId);\n\n        const result = await vc.verifyCredential({\n            credential: signedVC,\n            suite,\n            documentLoader: this.documentLoader,\n        });\n\n        return result;\n    }\n}\n"],"mappings":"AAAA;AACA,OAAOA,EAAP,MAAe,wBAAf,C,CACA;;AACA,SAASC,0BAAT,QAA2C,mDAA3C,C,CACA;;AACA,SAASC,oBAAT,QAAqC,4CAArC,C,CACA;;AACA,SAASC,WAAT,QAA4B,0BAA5B,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,oDAA9B,C,CACA;;AACA,SAASC,KAAT,QAAsB,4BAAtB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAIA,eAAe,MAAMC,IAAN,CAAW;EACtB;AACJ;AACA;AACA;AACA;AACA;EACiC,aAARC,QAAQ,CAACC,KAAD,EAAgB;IAC7C;IACI,MAAMC,UAAU,GAAG,oCAAnB;IAEA,MAAMC,OAAO,GAAG,MAAMV,0BAA0B,CAACW,IAA3B,CAAgC;MAClDC,IAAI,EAAE,4BAD4C;MAElDH,UAFkD;MAGlDI,EAAE,EAAEJ,UAAU,GAAG,GAAb,GAAmBD,KAH2B;MAIlDM,kBAAkB,EAAEN;IAJ8B,CAAhC,CAAtB;IAOA,MAAMO,KAAK,GAAG,IAAId,oBAAJ,CAAyB;MAAEe,GAAG,EAAEN;IAAP,CAAzB,CAAd;IACAK,KAAK,CAACE,IAAN,GAAa,sBAAb;IAEA,OAAOF,KAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACuC,aAAdG,cAAc,CAACC,GAAD,EAAc;IAC7C,IAAIA,GAAG,CAACC,UAAJ,CAAe,MAAf,CAAJ,EAA4B;MACxB,MAAMC,WAAW,GAAG,IAAInB,WAAJ,EAApB;MACA,MAAMoB,MAAM,GAAG,MAAMD,WAAW,CAACE,OAAZ,CAAoBJ,GAApB,CAArB;;MAEA,IAAIG,MAAM,CAACE,qBAAP,CAA6BC,KAA7B,IAAsC,CAACH,MAAM,CAACI,WAAlD,EAA+D;QAC3D,MAAM,IAAIC,KAAJ,CAAW,0BAAyBR,GAAI,EAAxC,CAAN;MACH;;MAED,MAAMS,MAAM,GAAG,MAAMxB,KAAK,CACtB,6GADsB,EAEtB;QACI,YAAYkB,MAAM,CAACI,WAAP,CAAmB,UAAnB,CADhB;QAEI,UAAU,QAFd;QAGI,MAAMP;MAHV,CAFsB,CAA1B;MASA,OAAO;QACHU,UAAU,EAAE,IADT;QAEHC,WAAW,EAAEX,GAFV;QAGHY,QAAQ,EAAEH;MAHP,CAAP;IAKH;;IAED,MAAMI,MAAM,GAAG7B,iBAAiB,CAAC8B,KAAlB,CAAwB5B,MAAxB,EAAgC,EAAhC,CAAf;IACA,MAAM6B,QAAQ,GAAG,MAAMF,MAAM,CAACb,GAAD,CAA7B;IAEA,OAAOe,QAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACkC,aAAVC,UAAU,CAACC,kBAAD,EAAiC5B,KAAjC,EAA8D;IACxF,MAAMO,KAAK,GAAG,MAAM,KAAKR,QAAL,CAAcC,KAAd,CAApB;;IAEA,IAAI;MACA,MAAM6B,gBAAgB,GAAG,MAAMtC,EAAE,CAACuC,KAAH,CAAS;QACpCH,UAAU,EAAEC,kBADwB;QAEpCrB,KAFoC;QAGpCG,cAAc,EAAE,KAAKA;MAHe,CAAT,CAA/B;MAMA,OAAOmB,gBAAP;IACH,CARD,CAQE,OAAOE,GAAP,EAAiB;MAAE;MACjB,MAAM,IAAIZ,KAAJ,CAAUY,GAAG,CAACC,OAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACoC,aAAZC,YAAY,CAACA,YAAD,EAA6BjC,KAA7B,EAA0D;IACtF,MAAMO,KAAK,GAAG,MAAM,KAAKR,QAAL,CAAcC,KAAd,CAApB;IACA,MAAMkC,SAAS,GAAG,MAAlB;;IAEA,IAAI;MACA,MAAMC,kBAAkB,GAAG,MAAM5C,EAAE,CAAC6C,gBAAH,CAAoB;QACjDH,YADiD;QAEjD1B,KAFiD;QAGjD2B,SAHiD;QAIjDxB,cAAc,EAAE,KAAKA;MAJ4B,CAApB,CAAjC;MAOA,OAAOyB,kBAAP;IACH,CATD,CASE,OAAOJ,GAAP,EAAiB;MAAE;MACjB,MAAM,IAAIZ,KAAJ,CAAUY,GAAG,CAACC,OAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACuC,aAAfK,eAAe,CAACC,QAAD,EAAgBtC,KAAhB,EAA6C;IAC5E,MAAMO,KAAK,GAAG,MAAM,KAAKR,QAAL,CAAcC,KAAd,CAApB;IAEA,MAAMc,MAAM,GAAG,MAAMvB,EAAE,CAACgD,gBAAH,CAAoB;MACrCZ,UAAU,EAAEW,QADyB;MAErC/B,KAFqC;MAGrCG,cAAc,EAAE,KAAKA;IAHgB,CAApB,CAArB;IAMA,OAAOI,MAAP;EACH;;AA7HqB"}