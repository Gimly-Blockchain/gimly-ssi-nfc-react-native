{"version":3,"sources":["index.tsx"],"names":["TangemSdk","NfcSdkModule","NfcSdk","scanCard","initialMessage","createKey","cardId","curve","createWallet","then","response","catch","deactiveKey","getKey","keyId","key","cards","card","filter","id","wallets","wallet","getKeys","keys","signCredential","hashes","walletPublicKey","options","sign","signPresentation","signUsingKey","startSession","stopSession","getStatus","getNFCStatus","purgeWallet","setPassCode","setPasscode","setAccessCode","resetUserCodes","nfcListener","addListener","enabled","removeNfcListener","listener","remove"],"mappings":"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","sourcesContent":["import type { EmitterSubscription } from 'react-native';\nimport TangemSdk from 'tangem-sdk-react-native';\nimport type {\n    Card,\n    OptionsSign,\n    CreateWalletResponse,\n    NFCStatusResponse,\n    EllipticCurve,\n    InitialMessage,\n    SignResponse,\n    PurgeWalletResponse,\n    SetUserCodesResponse,\n} from 'tangem-sdk-react-native';\n\nexport const NfcSdkModule = TangemSdk;\n\nexport default class NfcSdk {\n\n    public static async scanCard(initialMessage?: InitialMessage): Promise<Card> {\n        return await TangemSdk.scanCard({ initialMessage });\n    }\n\n    public static async createKey(\n        cardId: string,\n        curve?: EllipticCurve,\n        initialMessage?: InitialMessage\n    ): Promise<CreateWalletResponse | null> {\n        return await TangemSdk.createWallet({ cardId, curve, initialMessage })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n\n    /* TODO:\n        -  Can't find correlation on this method between terminal and tangem\n    */\n    public static async deactiveKey() {\n        \n    }\n\n      \n    /*TODO: \n        - Method should be tested with real card.\n    */\n    public static async getKey(\n        initialMessage: InitialMessage,\n        cardId: string,\n        keyId: string\n     ): Promise<Card> {\n        let key = null;\n        const cards = await TangemSdk.scanCard({ initialMessage });\n        if (cards) {\n            const card = cards.filter((card: any) => card.id === cardId)\n            if (card) {\n                key = card.wallets.filter((wallet: any) => wallet.id === keyId)\n            }\n        }\n        return key\n    }\n\n\n    /* TODO: \n        - Method should be tested with real card.\n    */\n    public static async getKeys(\n        initialMessage: InitialMessage,\n        cardId?: string,\n     ): Promise<Card> {\n        let keys = [];\n        const cards = await TangemSdk.scanCard({ initialMessage });\n        if (cards) {\n            const card = cards.filter((card: any) => card.id === cardId)\n            if (card) {\n                keys = card.wallets\n            }\n        }\n        return keys\n    }\n\n\n    /* TODO\n        - sign method on tangem react native app, accept diferent parameters tha the kotlin version, implemented with react native library parameters\n        - unable to identify the difference between signCredential, signPresentation and signUsingKey.\n        - implement the three methods, with the same code.\n    */\n    public static async signCredential(\n        hashes: [string],\n        walletPublicKey: string,\n        cardId: string,\n        initialMessage: InitialMessage\n    ): Promise<SignResponse | null> {\n        const options: OptionsSign = {\n            hashes,\n            walletPublicKey,\n            cardId,\n            initialMessage\n        };\n\n        return await TangemSdk.sign(options)\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n\n    /* TODO\n        - sign method on tangem react native app, accept diferent parameters tha the kotlin version, implemented with react native library parameters\n        - unable to identify the difference between signCredential, signPresentation and signUsingKey.\n        - implement the three methods, with the same code.\n    */\n    public static async signPresentation(\n        hashes: [string],\n        walletPublicKey: string,\n        cardId: string,\n        initialMessage: InitialMessage\n    ): Promise<SignResponse | null> {\n        const options: OptionsSign = {\n            hashes,\n            walletPublicKey,\n            cardId,\n            initialMessage\n        };\n\n        return await TangemSdk.sign(options)\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    \n    /* TODO\n        - sign method on tangem react native app, accept diferent parameters tha the kotlin version, implemented with react native library parameters\n        - unable to identify the difference between signCredential, signPresentation and signUsingKey.\n        - implement the three methods, with the same code.\n    */\n    public static async signUsingKey(\n        hashes: [string],\n        walletPublicKey: string,\n        cardId: string,\n        initialMessage: InitialMessage\n    ): Promise<SignResponse | null> {\n        const options: OptionsSign = {\n            hashes,\n            walletPublicKey,\n            cardId,\n            initialMessage\n        };\n\n        return await TangemSdk.sign(options)\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n\n\n    /* TODO:\n        - current \"tangem-sdk-react-native\" library does not have method \"deleteFiles\" however it seems to be implemented on this version:\n        - https://github.com/tangem/tangem-sdk-react-native/blob/main/src/index.ts\n    */\n    /*public static async deleteStoredCredential(\n        indicesToDelete: [number],\n        cardId: string,\n        initialMessage: InitialMessage\n    ) Promise<any | null> {\n        return await TangemSdk.deleteFiles({ indicesToDelete, cardId, initialMessage })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }*/\n\n    /* TODO:\n        - current \"tangem-sdk-react-native\" library does not have method \"readFiles\" however it seems to be implemented on this version:\n        - https://github.com/tangem/tangem-sdk-react-native/blob/main/src/index.ts\n    */\n    /*public static async getStoredCredentials(\n        readPrivateFiles: boolean,\n        indices: [number],\n        cardId: string,\n        initialMessage: InitialMessage\n    ) Promise<any | null> {\n        return await TangemSdk.readFiles({ readPrivateFiles, indices, cardId, initialMessage })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }*/\n\n\n    /* TODO:\n        - current \"tangem-sdk-react-native\" library does not have method \"readFiles\" however it seems to be implemented on this version:\n        - https://github.com/tangem/tangem-sdk-react-native/blob/main/src/index.ts\n    */\n    /*public static async getStoredCredential(\n        readPrivateFiles: boolean,\n        indices: [number],\n        cardId: string,\n        initialMessage: InitialMessage,\n        credentialId: string,\n    ) Promise<any | null> {\n        const files = getStoredCredentials(readPrivateFiles, indices, cardId, initialMessage)\n        return credentials.filter(cred => cred.id === credentialId )\n            \n    }*/\n\n\n    /* LEGACY METHODS CURRETLY IN USE IN GIMLY-MOBILE, REMOVING THEN WILL BREAK THE MOBILE APP */\n\n    public static async startSession(): Promise<void> {\n        await TangemSdk.startSession({});\n    }\n\n    public static async stopSession(): Promise<void> {\n        await TangemSdk.stopSession();\n    }\n\n    public static async sign(\n        hashes: [string],\n        walletPublicKey: string,\n        cardId: string,\n        initialMessage: InitialMessage\n    ): Promise<SignResponse | null> {\n        const options: OptionsSign = {\n            hashes,\n            walletPublicKey,\n            cardId,\n            initialMessage\n        };\n\n        return await TangemSdk.sign(options)\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public static async getStatus(): Promise<NFCStatusResponse> {\n        return await TangemSdk.getNFCStatus();\n    }\n\n    public static async createWallet(\n        cardId: string\n    ): Promise<CreateWalletResponse | null> {\n        return await TangemSdk.createWallet({ cardId })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public static async purgeWallet(\n        cardId: string,\n        walletPublicKey: string\n    ): Promise<PurgeWalletResponse | null> {\n        return await TangemSdk.purgeWallet({ cardId, walletPublicKey })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public static async setPassCode(\n        cardId: string\n    ): Promise<SetUserCodesResponse | null> {\n        return await TangemSdk.setPasscode({ cardId })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public static async setAccessCode(\n        cardId: string\n    ): Promise<SetUserCodesResponse | null> {\n        return TangemSdk.setAccessCode({ cardId })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public static async resetUserCodes(\n        cardId: string\n    ): Promise<SetUserCodesResponse | null> {\n        return await TangemSdk.resetUserCodes({ cardId })\n            .then(response => {\n                return response;\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public static nfcListener(): EmitterSubscription | undefined {\n        return TangemSdk.addListener('NFCStateChange', enabled => {\n            return enabled;\n        });\n    }\n\n    public static removeNfcListener(listener: EmitterSubscription): boolean {\n        if (listener) {\n            listener.remove();\n            return true;\n        }\n        return false;\n    }\n}\n"]}