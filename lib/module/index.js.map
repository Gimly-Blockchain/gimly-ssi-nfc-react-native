{"version":3,"names":["TangemSdk","EllipticCurve","FileVisibility","Sign","NfcSdkModule","NfcSdk","scanCard","initialMessage","data","cardId","batchId","cardPublicKey","cardPublicKeyMultibase","supportedCurves","curves","firmwareVersion","major","minor","type","hotFix","patch","cardInfo","response","createKey","curve","Error","ellipticCurve","Secp256k1","Ed25519","Secp256r1","createWallet","keyInfo","publicKeyMultibase","wallet","publicKey","index","id","keys","keyId","deactivateKey","purgeWallet","getKeys","wallets","map","length","getKey","keyResult","filtered","filter","k","signUsingKey","signRequest","inputs","hashes","input","signHashes","signatures","signature","encoding","output","signCredential","signCredentialRequest","signedCredential","credential","controller","verifyCredential","verification","verified","signPresentation","signPresentationRequest","signedPresentation","presentation","challenge","verifyPresentation","storeCredential","fileName","sCredential","JSON","stringify","hexEncode","files","readFiles","fileCounter","Promise","resolve","setTimeout","startingSignature","finalizingSignature","prepareHashes","file","counter","fileVisibility","Public","writeFiles","deleteStoredCredential","indices","deleteFiles","getStoredCredentials","credentials","item","decodeData","hexDecode","parse","getStoredCredential","setAccessCode","accessCode","setPasscode","passcode","resetUserCodes","json","split","_c","i","charCodeAt","toString","slice","join","hexes","match","c","String","fromCharCode","parseInt"],"sources":["index.tsx"],"sourcesContent":["import TangemSdk from 'tangem-sdk';\nimport { EllipticCurve, FileVisibility, OwnerFile } from 'tangem-sdk';\nimport type {\n  CardInfo,\n  CardInfoResult,\n  KeyInfo,\n  KeyResults,\n  SignCredentialRequest,\n  SignCredentialResponse,\n  SignOutputFromInput,\n  SignPresentationRequest,\n  SignPresentationResponse,\n  SignRequest,\n  SignResponse,\n  StoredCredentialsResponse,\n  WalletType,\n  SsiType,\n  FilesType,\n  Message,\n  SuccessResponse,\n} from './types';\nimport Sign from './signing';\n\nexport const NfcSdkModule = TangemSdk;\n\nexport default class NfcSdk {\n  /**\n   *  Constructor for reusable parameters\n   *\n   * @param cardId the card identifier is store globally\n   * @returns nothing\n   */\n  public static cardId: string;\n  public static keyId: string;\n\n  /**\n   * Scan the NFC card\n   *\n   * @param initialMessage The message to display\n   * @returns The card information retrieved with the scan\n   */\n  static async scanCard(initialMessage?: Message): Promise<CardInfoResult> {\n    const data = await TangemSdk.scanCard(initialMessage);\n\n    const {\n      cardId,\n      batchId,\n      cardPublicKey: cardPublicKeyMultibase,\n      supportedCurves: curves,\n      firmwareVersion: { major, minor, type, hotFix: patch },\n    } = data;\n\n    const cardInfo: CardInfo = {\n      curves,\n      firmwareVersion: {\n        major,\n        minor,\n        type,\n        patch,\n      },\n    };\n\n    NfcSdk.cardId = cardId;\n\n    const response: CardInfoResult = {\n      cardId,\n      batchId,\n      cardPublicKeyMultibase,\n      cardInfo,\n    };\n\n    return response;\n  }\n\n  /**\n   * Create an asymmetric keypair on the NFC card\n   *\n   * @param curve A string with the elliptic Curve\n   * @returns The results of the created key\n   */\n  static async createKey(curve: string): Promise<KeyResults> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    let ellipticCurve = EllipticCurve.Secp256k1; //default\n\n    if (curve === 'secp256k1') ellipticCurve = EllipticCurve.Secp256k1;\n    if (curve === 'ed25519') ellipticCurve = EllipticCurve.Ed25519;\n    if (curve === 'secp256r1') ellipticCurve = EllipticCurve.Secp256r1;\n\n    const data = await TangemSdk.createWallet(ellipticCurve, NfcSdk.cardId);\n\n    const keyInfo: KeyInfo = {\n      publicKeyMultibase: data.wallet.publicKey,\n      index: data.wallet.index,\n    };\n\n    const response: KeyResults = {\n      id: data.cardId,\n      keys: [keyInfo],\n    };\n\n    NfcSdk.keyId = keyInfo.publicKeyMultibase;\n\n    return response;\n  }\n\n  /**\n   * Deactivate a key by card index, public key, or DID key\n   *\n   * @param keyId The Key index, public key, or DID/Verification method Key ID\n   * @returns null\n   */\n  static async deactivateKey(keyId?: string): Promise<SuccessResponse | null> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    if (!keyId && !NfcSdk.keyId) {\n      throw new Error('keyId not provided, please use getKeys first');\n    }\n\n    const response = await TangemSdk.purgeWallet(\n      keyId || NfcSdk.keyId,\n      NfcSdk.cardId\n    );\n\n    return response;\n  }\n\n  /**\n   * Get all the keys of the card\n   *\n   * @param initialMessage The message to display\n   * @returns The keys retrieved from the card\n   */\n  static async getKeys(initialMessage: Message): Promise<KeyResults> {\n    const data = await TangemSdk.scanCard(initialMessage);\n\n    const keys = data.wallets\n      ? data.wallets.map((wallet: { publicKey: any; index: any }) => {\n          const keyInfo: KeyInfo = {\n            publicKeyMultibase: wallet.publicKey,\n            index: wallet.index,\n          };\n\n          return keyInfo;\n        })\n      : [];\n\n    const response: KeyResults = {\n      id: data.cardId,\n      keys,\n    };\n\n    if (response.keys.length > 0) {\n      NfcSdk.keyId = response.keys[0].publicKeyMultibase;\n    }\n\n    return response;\n  }\n\n  /**\n   * Get a key by keyId\n   *\n   * @param initialMessage The message to display\n   * @param keyId The Id of a key\n   * @returns The key retrieved from the card\n   */\n  static async getKey(\n    initialMessage: Message,\n    keyId?: string\n  ): Promise<KeyInfo | null> {\n    if (!keyId && !NfcSdk.keyId) {\n      throw new Error('keyId not provided, please use getKeys first');\n    }\n\n    const keyResult: KeyResults = await this.getKeys(initialMessage);\n    const { keys } = keyResult;\n\n    const filtered = keys.filter(\n      (k: KeyInfo) => k.publicKeyMultibase === (keyId || NfcSdk.keyId)\n    );\n\n    if (filtered.length === 0) return null;\n\n    const keyInfo: KeyInfo = {\n      publicKeyMultibase: filtered[0].publicKeyMultibase,\n      index: filtered[0].index,\n    };\n\n    return keyInfo;\n  }\n\n  /**\n   * Sign one or more inputs using the private key stored on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signRequest Sign one or more inputs, typically hashes in hex format\n   * @returns A successful response after signing or an error\n   */\n  static async signUsingKey(\n    signRequest: SignRequest,\n    keyId?: string\n  ): Promise<SignResponse> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    if (!keyId && !NfcSdk.keyId) {\n      throw new Error('keyId not provided, please use getKeys first');\n    }\n\n    const { inputs } = signRequest;\n    const hashes = inputs.map((input) => input.data);\n    const data = await TangemSdk.signHashes(\n      hashes,\n      keyId || NfcSdk.keyId,\n      NfcSdk.cardId\n    );\n\n    // @ts-ignore\n    const signatures: SignOutputFromInput[] = data.signatures.map(\n      (signature: string, index: number) => {\n        return {\n          input: { data: hashes[index], encoding: 'hex' },\n          output: { data: signature, encoding: 'hex' },\n        };\n      }\n    );\n\n    const response: SignResponse = {\n      publicKeyMultibase: keyId,\n      signatures,\n    };\n\n    return response;\n  }\n\n  /**\n   * Add a proof to the supplied credential, using the private key on the NFC card and thus making\n   * it a Verifiable Credential. It allows for optional storage of the VC on the NFC card\n   *\n   * @param signCredentialRequest Signs one or more inputs, typically hashes in hex format\n   * @param keyId The Id of a key\n   * @param controller The DID of the controller\n   * @returns A success response after signing\n   */\n  static async signCredential(\n    signCredentialRequest: SignCredentialRequest,\n    keyId?: string\n  ): Promise<SignCredentialResponse | null> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n    if (!keyId && !NfcSdk.keyId) {\n      throw new Error('keyId not provided, please use getKeys first');\n    }\n    const signedCredential = await Sign.credential(\n      signCredentialRequest.credential,\n      keyId || NfcSdk.keyId,\n      NfcSdk.cardId,\n      signCredentialRequest.controller\n    );\n    return signedCredential;\n  }\n\n  /**\n   * Verify a credential\n   *\n   * @param signedCredential a signed credential\n   * @returns wheter the credential is valid or not\n   */\n  static async verifyCredential(\n    signCredentialRequest: SignCredentialRequest\n  ): Promise<boolean | null> {\n    const verification = await Sign.verifyCredential(\n      signCredentialRequest.credential,\n      NfcSdk.keyId,\n      NfcSdk.cardId,\n      signCredentialRequest.controller\n    );\n    return verification.verified;\n  }\n\n  /**\n   * Sign the supplied presentation using the key on the NFC card, adding a proof and making it\n   * a verifiable presentation\n   *\n   * @param signPresentationRequest Signs a presentation\n   * @param keyId The Id of a key\n   * @param controller The DID of the controller\n   * @param challenge The presentation challenge\n   * @returns A successful response after signing\n   */\n  static async signPresentation(\n    signPresentationRequest: SignPresentationRequest,\n    keyId?: string\n  ): Promise<SignPresentationResponse> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n    if (!keyId && !NfcSdk.keyId) {\n      throw new Error('keyId not provided, please use getKeys first');\n    }\n    const signedPresentation = await Sign.presentation(\n      signPresentationRequest.presentation,\n      keyId || NfcSdk.keyId,\n      NfcSdk.cardId,\n      signPresentationRequest.controller,\n      signPresentationRequest.challenge\n    );\n    return signedPresentation;\n  }\n\n  /**\n   * Verifies a presentation\n   *\n   * @param signedPresentation A signed presentation\n   * @returns wheter the credential is valid or not\n   */\n  static async verifyPresentation(\n    signPresentationRequest: SignPresentationRequest\n  ): Promise<boolean | null> {\n    const verification = await Sign.verifyPresentation(\n      signPresentationRequest.presentation,\n      NfcSdk.keyId,\n      NfcSdk.cardId,\n      signPresentationRequest.controller,\n      signPresentationRequest.challenge\n    );\n    return verification.verified;\n  }\n\n  /**\n   * Store a credential\n   *\n   * @param credential The credential to be stored\n   * @param fileName The file name\n   * @returns A success response or null\n   */\n  static async storeCredential(\n    credential: any,\n    fileName: string\n  ): Promise<SuccessResponse | null> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    const sCredential = JSON.stringify(credential);\n    const data = hexEncode(sCredential);\n\n    const files = await TangemSdk.readFiles(true);\n    // @ts-ignore\n    const fileCounter = files.length + 1;\n\n    await new Promise((resolve) => setTimeout(resolve, 4000));\n\n    const { startingSignature, finalizingSignature } =\n      await TangemSdk.prepareHashes(\n        NfcSdk.cardId,\n        data,\n        fileCounter,\n        fileName,\n        '11121314151617184771ED81F2BACF57479E4735EB1405083927372D40DA9E92' // TODO hardcoded key due to a Tangem SDK limitation\n      );\n\n    const file: OwnerFile = {\n      startingSignature,\n      finalizingSignature,\n      data,\n      fileName,\n      counter: fileCounter,\n      fileVisibility: FileVisibility.Public,\n    };\n\n    const response = await TangemSdk.writeFiles([file], NfcSdk.cardId);\n\n    return response;\n  }\n\n  /**\n   * Delete a specific stored Verifiable Credential\n   *\n   * @param fileName The file name of a credential\n   * @returns A successful response or null\n   */\n  static async deleteStoredCredential(\n    fileName: string\n  ): Promise<SuccessResponse | null> {\n    const files = await TangemSdk.readFiles(true, fileName);\n    // @ts-ignore\n\n    const indices = files.map((file: { index: any }) => file.index);\n\n    await TangemSdk.deleteFiles(indices);\n\n    const response: SuccessResponse = {\n      cardId: NfcSdk.cardId,\n    };\n\n    return response;\n  }\n\n  /**\n   * Return all the stored Verifiable Credentials\n   *\n   * @returns The stored credentials\n   */\n  static async getStoredCredentials(): Promise<StoredCredentialsResponse> {\n    const files = await TangemSdk.readFiles(true);\n\n    const credentials = files\n      // @ts-ignore\n      .map((item: { data: string; name: string }) => {\n        try {\n          const decodeData = hexDecode(item.data);\n          return JSON.parse(decodeData);\n        } catch {\n          return null;\n        }\n      })\n      .filter((item: { data: string; name: string }) => item);\n\n    const response: StoredCredentialsResponse = { credentials };\n\n    return response;\n  }\n\n  /**\n   * Return a specific stored Verifiable Credential\n   *\n   * @param fileName The file name of a credential\n   * @returns The stored credential or null\n   */\n  static async getStoredCredential(\n    fileName: string\n  ): Promise<StoredCredentialsResponse | null> {\n    const files = await TangemSdk.readFiles(true, fileName);\n\n    const credentials = files\n      // @ts-ignore\n      .map((item: { data: string; name: string }) => {\n        try {\n          const decodeData = hexDecode(item.data);\n          return JSON.parse(decodeData);\n        } catch {\n          return null;\n        }\n      })\n      .filter((item: { data: string; name: string }) => item);\n\n    const response: StoredCredentialsResponse = { credentials };\n\n    return response;\n  }\n\n  /**\n   * Set an access code on the card, if set all commands, including Scan Card, will require to submit this code\n   *\n   * @param accessCode The access code\n   * @returns A success response or null\n   */\n  static async setAccessCode(\n    accessCode: string\n  ): Promise<SuccessResponse | null> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    const data = await TangemSdk.setAccessCode(accessCode, NfcSdk.cardId);\n\n    return data;\n  }\n\n  /**\n   * Set a passcode. Passcode protects signing and operations that can alter security parameters\n   *\n   * @param passcode The pass code\n   * @returns A success response or null\n   */\n  static async setPasscode(passcode: string): Promise<SuccessResponse | null> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    const data = await TangemSdk.setPasscode(passcode, NfcSdk.cardId);\n\n    return data;\n  }\n\n  /**\n   * Reset both access code and passcode if they were set\n   *\n   * @returns A success response or null\n   */\n  static async resetUserCodes(): Promise<SuccessResponse | null> {\n    if (!NfcSdk.cardId) {\n      throw new Error('Please use scanCard first');\n    }\n\n    const data = await TangemSdk.resetUserCodes(NfcSdk.cardId);\n\n    return data;\n  }\n\n  /**\n   * Exposes public methods related to wallet operations\n   */\n  public static wallet: WalletType = {\n    scanCard: NfcSdk.scanCard,\n    setAccessCode: NfcSdk.setAccessCode,\n    setPasscode: NfcSdk.setPasscode,\n    resetUserCodes: NfcSdk.resetUserCodes,\n    createKey: NfcSdk.createKey,\n    getKeys: NfcSdk.getKeys,\n    getKey: NfcSdk.getKey,\n    deactivateKey: NfcSdk.deactivateKey,\n  };\n\n  /**\n   * Exposes public methods related to ssi operation\n   */\n  public static ssi: SsiType = {\n    signUsingKey: NfcSdk.signUsingKey,\n    signCredential: NfcSdk.signCredential,\n    signPresentation: NfcSdk.signPresentation,\n    verifyCredential: NfcSdk.verifyCredential\n    // verifyPresentation: NfcSdk.verifyPresentation,\n  };\n\n  /**\n   * Exposes public methods related to wallet operations\n   */\n  public static files: FilesType = {\n    storeCredential: NfcSdk.storeCredential,\n    getStoredCredentials: NfcSdk.getStoredCredentials,\n    getStoredCredential: NfcSdk.getStoredCredential,\n    deleteStoredCredential: NfcSdk.deleteStoredCredential,\n  };\n}\n\n// TODO: REFACTOR. Move the following 3 methods to a separate file with common functions\nconst hexEncode = (input: string): string => {\n  const json = JSON.stringify(input);\n  const response = json\n    .split('')\n    .map((_c, i) => ('000' + json.charCodeAt(i).toString(16)).slice(-4))\n    .join('');\n\n  return response;\n};\n\nconst hexDecode = (input: string): string => {\n  const hexes = input.match(/.{1,4}/g) || [];\n  const response = hexes\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join('');\n\n  return response;\n};\n\nexport * from './types';\nexport { EllipticCurve } from 'tangem-sdk';\n"],"mappings":"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"}