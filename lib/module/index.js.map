{"version":3,"names":["TangemSdk","EllipticCurve","NfcSdkModule","NfcSdk","scanCard","initialMessage","data","cardId","batchId","cardPublicKey","cardPublicKeyMultibase","supportedCurves","curves","firmwareVersion","major","minor","type","hotFix","patch","cardInfo","response","createKey","curve","ellipticCurve","Secp256k1","Ed25519","Secp256r1","createWallet","keyInfo","publicKeyMultibase","wallet","publicKey","index","id","keys","deactivateKey","keyId","purgeWallet","getKeys","console","log","wallets","map","getKey","keyResult","filtered","filter","k","length","signUsingKey","signRequest","inputs","hashes","input","signHashes","signatures","signature","encoding","output","signCredential","signCredentialRequest","file","JSON","stringify","credential","files","requestResponse","writeOwnerFile","verifiableCredential","issuanceDate","proof","created","proofPurpose","verificationMethod","jws","credentialSubject","issuer","expirationDate","credentialStatus","storageId","err","signPresentation","signPresentationRequest","verifiableCredential_1","verifiablePresentation","deleteStoredCredential","credentialId","indicesToDelete","deleteFiles","getStoredCredentials","readPrivateFiles","indices","undefined","readFiles","credentials","getStoredCredential","setAccessCode","accessCode","setPasscode","passcode","resetUserCodes"],"sources":["index.tsx"],"sourcesContent":["import TangemSdk from 'tangem-sdk-react-native';\nimport type {\n  SuccessResponse,\n  Message,\n  File\n} from 'tangem-sdk-react-native';\n\nimport { EllipticCurve } from 'tangem-sdk-react-native';\n\nimport type {\n  CardInfoResult,\n  CardInfo,\n  KeyInfo,\n  KeyResults,\n  SignCredentialRequest,\n  SignCredentialResponse,\n  SignPresentationRequest,\n  SignPresentationResponse,\n  SignRequest,\n  SignResponse,\n  StoredCredentialsResponse,\n  VerifiableCredential,\n  StoredCredentialResponse,\n  SignOutputFromInput,\n} from './types';\n\nexport const NfcSdkModule = TangemSdk;\n\nexport default class NfcSdk {\n\n  /**\n   * Scan the NFC card\n   *\n   * @param initialMessage The message to display\n   * @returns The card information retrieved with the scan\n   */\n  public static async scanCard(\n    initialMessage?: Message,\n  ): Promise<CardInfoResult> {\n    const data = await TangemSdk.scanCard(initialMessage);\n\n    const {\n      cardId,\n      batchId,\n      cardPublicKey: cardPublicKeyMultibase,\n      supportedCurves: curves,\n      firmwareVersion: {major, minor, type, hotFix: patch},\n    } = data;\n\n    const cardInfo: CardInfo = {\n      curves,\n      firmwareVersion: {\n        major,\n        minor,\n        type,\n        patch,\n      },\n    };\n\n    const response: CardInfoResult = {\n      cardId,\n      batchId,\n      cardPublicKeyMultibase,\n      cardInfo\n    };\n\n    return response;\n  }\n\n  /**\n   * Create an asymmetric keypair on the NFC card\n   *\n   * @param cardId The Id of a card\n   * @param curve A string with the elliptic Curve\n   * @returns The results of the created key\n   */\n  public static async createKey(\n    cardId: string,\n    curve: string,\n  ): Promise<KeyResults> {\n\n    let ellipticCurve = EllipticCurve.Secp256k1; //default\n    if (curve === 'secp256k1') ellipticCurve = EllipticCurve.Secp256k1;\n    if (curve === 'ed25519') ellipticCurve = EllipticCurve.Ed25519;\n    if (curve === 'secp256r1') ellipticCurve = EllipticCurve.Secp256r1;\n\n    const data = await TangemSdk.createWallet(ellipticCurve, cardId);\n\n    const keyInfo: KeyInfo = {\n      publicKeyMultibase: data.wallet.publicKey,\n      index: data.wallet.index\n    };\n\n    const response: KeyResults = {\n      id: data.cardId,\n      keys: [keyInfo]\n    };\n\n    return response;\n  }\n\n  /**\n   * Deactivate a key by card index, public key, or DID key\n   *\n   * @param cardId The Id of a card\n   * @param keyId The Key index, public key, or DID/Verification method Key ID\n   * @returns null\n   */\n  public static async deactivateKey(\n    cardId: string,\n    keyId: string,\n  ): Promise<SuccessResponse | null>  {\n\n    const response: SuccessResponse = await TangemSdk.purgeWallet(keyId, cardId);\n\n    return response;\n  }\n\n  /**\n   * Get all keys by card Id\n   *\n   * @param initialMessage The message to display\n   * @param cardId The Id of a card\n   * @returns The keys retrieved from the card\n   */\n  public static async getKeys(\n    initialMessage: Message,\n    cardId?: string,\n  ): Promise<KeyResults> {\n\n    console.log(cardId) //TODO: what should we do with the cardId\n    const data = await TangemSdk.scanCard(initialMessage);\n\n    const keys = data.wallets\n      ? data.wallets.map(wallet => {\n          const keyInfo: KeyInfo = {\n            publicKeyMultibase: wallet.publicKey,\n            index: wallet.index\n          };\n\n          return keyInfo;\n        })\n      : [];\n\n    const response: KeyResults = {\n      id: data.cardId,\n      keys,\n    };\n\n    return response;\n  }\n\n  /**\n   * Get a key by Card Id and keyId\n   *\n   * @param initialMessage The message to display\n   * @param cardId The Id of a card\n   * @param keyId The Id of a key\n   * @returns The key retrieved from the card\n   */\n  public static async getKey(\n    initialMessage: Message,\n    cardId: string,\n    keyId: string,\n  ): Promise<KeyInfo|null> {\n    const keyResult: KeyResults = await this.getKeys(initialMessage, cardId);\n    const {keys} = keyResult;\n\n    const filtered = keys.filter((k: KeyInfo) => k.publicKeyMultibase === keyId);\n\n    if (filtered.length === 0) return null;\n\n    const keyInfo: KeyInfo = {\n      publicKeyMultibase: filtered[0].publicKeyMultibase,\n      index: filtered[0].index\n    };\n\n    return keyInfo;\n  }\n\n  /**\n   * Sign one or more inputs using the private key stored on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signRequest Sign one or more inputs, typically hashes in hex format\n   * @param cardId The Id of a card\n   * @returns A successful response after signing or an error\n   */\n  public static async signUsingKey(\n    keyId: string,\n    signRequest: SignRequest,\n    cardId: string,\n  ): Promise<SignResponse> {\n\n    const {inputs} = signRequest;\n    const hashes = inputs.map(input => input.data);\n    const data = await TangemSdk.signHashes(hashes, keyId, cardId);\n\n    const signatures: SignOutputFromInput[] = data?.[0].signatures.map(\n      (signature, index) => {\n        return {\n          input: {data: hashes[index], encoding: 'hex'},\n          output: {data: signature, encoding: 'hex'},\n        };\n      },\n    );\n\n    const response: SignResponse = {\n      publicKeyMultibase: keyId,\n      signatures,\n    };\n\n    return response;\n  }\n\n  /**\n   * Add a proof to the supplied credential, using the private key on the NFC card and thus making it a Verifiable Credential. It allows for optional storage of the VC on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signCredentialRequest Signs one or more inputs, typically hashes in hex format\n   * @param cardId The Id of a card\n   * @returns A success response after signing\n   */\n  public static async signCredential(\n    keyId: string,\n    signCredentialRequest: SignCredentialRequest,\n    cardId: string,\n  ): Promise<SignCredentialResponse|null> {\n\n    const file: File = {\n      data: JSON.stringify(signCredentialRequest.credential),\n    }\n\n    const files: File[] = [file];\n\n    try {\n      const requestResponse = await TangemSdk.writeOwnerFile(files, keyId, cardId)\n      console.log(requestResponse)\n      return {\n        verifiableCredential:  {\n          issuanceDate: '',\n          proof:  {\n            type: '',\n            created: '',\n            proofPurpose: '',\n            verificationMethod: '',\n            jws: '',\n          },\n          \"@context\": [],\n          id: '',\n          type: [],\n          credentialSubject: { id: ''},\n          issuer: '',\n          expirationDate: '',\n          credentialStatus:  {\n            id: '',\n            type: '',\n          },\n        },\n        storageId: '',\n      };\n    } catch (err) {\n      console.log(err);\n      return null;\n    }\n  }\n\n  /**\n   * Sign the supplied presentation using the key on the NFC card, adding a proof and making it a verifiable presentation\n   *\n   * @param keyId The Id of a key\n   * @param signPresentationRequest Signs a presentation\n   * @param cardId The Id of a card\n   * @returns A successful response after signing\n   */\n  public static async signPresentation(\n    keyId: string,\n    signPresentationRequest: SignPresentationRequest,\n    cardId: string,\n  ): Promise<SignPresentationResponse> {\n    console.log(keyId, signPresentationRequest, cardId);\n    // TODO: Following code are hardcoded responses, expected as terminal api structure.\n    const verifiableCredential_1: VerifiableCredential = {\n      issuanceDate: '',\n      proof: {\n        type: '',\n        created: '',\n        proofPurpose: '',\n        verificationMethod: '',\n        jws: '',\n      },\n      '@context': [],\n      id: '',\n      type: [],\n      credentialSubject: {id: ''},\n      issuer: '',\n      expirationDate: '',\n      credentialStatus: {id: '', type: ''},\n    };\n    const response:SignPresentationResponse = {\n      verifiablePresentation: {\n        proof: {\n          type: '',\n          created: '',\n          proofPurpose: '',\n          verificationMethod: '',\n          jws: '',\n        },\n        \"@context\": [],\n        type: \"\",\n        verifiableCredential: [verifiableCredential_1],\n      }\n    }\n    return response;\n  }\n\n  /**\n   * Delete a specific stored Verifiable Credential\n   *\n   * @param credentialId The Id of a credential\n   * @param cardId The Id of a card\n   * @returns A successful response or null\n   */\n  public static async deleteStoredCredential(\n    credentialId: string,\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    console.log(credentialId)\n    // TODO: as first parameter deleteFiles espects \"indicesToDelete\" which is an array of numbers. Investigate or ask correlation between credentialId(string) <-> indicesToDelete(array of numbers)\n    // TODO: dummy const to bypass tsx errors\n    const indicesToDelete: number[] = []; // Indexes of files that should be deleted. If undefined - deletes all files from card\n\n    const data = await TangemSdk.deleteFiles(indicesToDelete, cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /**\n   * Return all the stored Verifiable Credentials\n   *\n   * @param cardId The Id of a card\n   * @returns The stored credentials\n   */\n  public static async getStoredCredentials(\n    cardId: string,\n  ): Promise<StoredCredentialsResponse> {\n    const readPrivateFiles: boolean = true;\n    const indices = undefined;\n    const data = await TangemSdk.readFiles(readPrivateFiles, indices, cardId);\n    console.log(data);\n    // TODO: convert data to credentials as expected by terminal format\n    const response: StoredCredentialsResponse = {\n      credentials: [\n        {\n          \"@context\": [\"\"],\n          id: \"\",\n          type: [\"\"],\n          credentialSubject: {\n            id: \"\"\n          },\n          issuer: \"\",\n          issuanceDate: \"\",\n          expirationDate: \"\",\n          credentialStatus: {\n            id: \"\",\n            type: \"\",\n          },\n          proof: {\n            type: \"\",\n            created: \"\",\n            verificationMethod: \"\",\n            proofPurpose: \"\",\n            jws: \"\"\n          }\n        }\n      ]\n    }\n    return response;\n  }\n\n  /**\n   * Return a specific stored Verifiable Credential\n   *\n   * @param cardId The Id of a card\n   * @param credentialId  The Id of a credential\n   * @returns The stored credential or null\n   */\n  public static async getStoredCredential(\n    cardId: string,\n    credentialId: string,\n  ): Promise<StoredCredentialResponse|null> {\n    const data = await this.getStoredCredentials(cardId);\n    const filtered = data.credentials.filter(\n      credential => credential.id === credentialId,\n    );\n    if (filtered.length === 0) {\n      return null;\n    }\n    return {\n      credential: filtered[0],\n    };\n  }\n\n  /**\n   * Set an access code on the card, if set all commands, including Scan Card, will require to submit this code\n   *\n   * @param accessCode The access code\n   * @param cardId The Id of a card\n   * @returns A success response or null\n   */\n  public static async setAccessCode(\n    accessCode: string,\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    const data = await TangemSdk.setAccessCode(accessCode, cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /**\n   * Set a passcode. Passcode protects signing and operations that can alter security parameters\n   *\n   * @param passcode The pass code\n   * @param cardId The Id of a card\n   * @returns A success response or null\n   */\n  public static async setPasscode(\n    passcode: string,\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    const data = await TangemSdk.setPasscode(passcode, cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /**\n   * Reset both access code and passcode if they were set\n   *\n   * @param cardId The Id of a card\n   * @returns A success response or null\n   */\n  public static async resetUserCodes(\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    const data = await TangemSdk.resetUserCodes(cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n}\n\nexport * from './types';\nexport { EllipticCurve } from 'tangem-sdk-react-native';\n"],"mappings":"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"}