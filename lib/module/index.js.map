{"version":3,"names":["TangemSdk","EllipticCurve","FileVisibility","Sign","NfcSdkModule","NfcSdk","scanCard","initialMessage","data","cardId","batchId","cardPublicKey","cardPublicKeyMultibase","supportedCurves","curves","firmwareVersion","major","minor","type","hotFix","patch","cardInfo","response","createKey","curve","Error","ellipticCurve","Secp256k1","Ed25519","Secp256r1","createWallet","keyInfo","publicKeyMultibase","wallet","publicKey","index","id","keys","keyId","deactivateKey","purgeWallet","getKeys","wallets","map","length","getKey","keyResult","filtered","filter","k","signUsingKey","signRequest","inputs","hashes","input","signHashes","signatures","signature","encoding","output","signCredential","signCredentialRequest","signedCredential","credential","signPresentation","signPresentationRequest","signedPresentation","presentation","storeCredential","fileName","sCredential","JSON","stringify","hexEncode","files","readFiles","fileCounter","Promise","resolve","setTimeout","startingSignature","finalizingSignature","prepareHashes","file","counter","fileVisibility","Public","writeFiles","deleteStoredCredential","indices","deleteFiles","getStoredCredentials","credentials","item","decodeData","hexDecode","parse","getStoredCredential","setAccessCode","accessCode","setPasscode","passcode","resetUserCodes","json","split","_c","i","charCodeAt","toString","slice","join","hexes","match","c","String","fromCharCode","parseInt"],"sources":["index.tsx"],"sourcesContent":["import TangemSdk from 'tangem-sdk';\nimport { EllipticCurve, FileVisibility, OwnerFile } from 'tangem-sdk';\nimport type {\n    CardInfo,\n    CardInfoResult,\n    KeyInfo,\n    KeyResults,\n    SignCredentialRequest,\n    SignCredentialResponse,\n    SignOutputFromInput,\n    SignPresentationRequest,\n    SignPresentationResponse,\n    SignRequest,\n    SignResponse,\n    StoredCredentialsResponse,\n    WalletType,\n    SsiType,\n    FilesType,\n    Message,\n    SuccessResponse,\n} from './types';\nimport Sign from './signing';\n\nexport const NfcSdkModule = TangemSdk;\n\nexport default class NfcSdk {\n  /**\n   *  Constructor for reusable parameters\n   *\n   * @param cardId the card identifier is store globally\n   * @returns nothing\n   */\n  public static cardId: string;\n  public static keyId: string;\n\n  /**\n   * Scan the NFC card\n   *\n   * @param initialMessage The message to display\n   * @returns The card information retrieved with the scan\n   */\n  static async scanCard(initialMessage?: Message): Promise<CardInfoResult> {\n      const data = await TangemSdk.scanCard(initialMessage);\n\n      const {\n          cardId,\n          batchId,\n          cardPublicKey: cardPublicKeyMultibase,\n          supportedCurves: curves,\n          firmwareVersion: { major, minor, type, hotFix: patch },\n      } = data;\n\n      const cardInfo: CardInfo = {\n          curves,\n          firmwareVersion: {\n              major,\n              minor,\n              type,\n              patch,\n          },\n      };\n\n      NfcSdk.cardId = cardId;\n\n      const response: CardInfoResult = {\n          cardId,\n          batchId,\n          cardPublicKeyMultibase,\n          cardInfo,\n      };\n\n      return response;\n  }\n\n  /**\n   * Create an asymmetric keypair on the NFC card\n   *\n   * @param curve A string with the elliptic Curve\n   * @returns The results of the created key\n   */\n  static async createKey(curve: string): Promise<KeyResults> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      let ellipticCurve = EllipticCurve.Secp256k1; //default\n\n      if (curve === 'secp256k1') ellipticCurve = EllipticCurve.Secp256k1;\n      if (curve === 'ed25519') ellipticCurve = EllipticCurve.Ed25519;\n      if (curve === 'secp256r1') ellipticCurve = EllipticCurve.Secp256r1;\n\n      const data = await TangemSdk.createWallet(ellipticCurve, NfcSdk.cardId);\n\n      const keyInfo: KeyInfo = {\n          publicKeyMultibase: data.wallet.publicKey,\n          index: data.wallet.index,\n      };\n\n      const response: KeyResults = {\n          id: data.cardId,\n          keys: [keyInfo],\n      };\n\n      NfcSdk.keyId = keyInfo.publicKeyMultibase;\n\n      return response;\n  }\n\n  /**\n   * Deactivate a key by card index, public key, or DID key\n   *\n   * @param keyId The Key index, public key, or DID/Verification method Key ID\n   * @returns null\n   */\n  static async deactivateKey(keyId?: string): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const response = await TangemSdk.purgeWallet(\n          keyId || NfcSdk.keyId,\n          NfcSdk.cardId\n      );\n\n      return response;\n  }\n\n  /**\n   * Get all the keys of the card\n   *\n   * @param initialMessage The message to display\n   * @returns The keys retrieved from the card\n   */\n  static async getKeys(initialMessage: Message): Promise<KeyResults> {\n      const data = await TangemSdk.scanCard(initialMessage);\n\n      const keys = data.wallets\n          ? data.wallets.map((wallet: { publicKey: any; index: any }) => {\n              const keyInfo: KeyInfo = {\n                  publicKeyMultibase: wallet.publicKey,\n                  index: wallet.index,\n              };\n\n              return keyInfo;\n          })\n          : [];\n\n      const response: KeyResults = {\n          id: data.cardId,\n          keys,\n      };\n\n      if (response.keys.length > 0) {\n          NfcSdk.keyId = response.keys[0].publicKeyMultibase;\n      }\n\n      return response;\n  }\n\n  /**\n   * Get a key by keyId\n   *\n   * @param initialMessage The message to display\n   * @param keyId The Id of a key\n   * @returns The key retrieved from the card\n   */\n  static async getKey(\n      initialMessage: Message,\n      keyId?: string\n  ): Promise<KeyInfo | null> {\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const keyResult: KeyResults = await this.getKeys(initialMessage);\n      const { keys } = keyResult;\n\n      const filtered = keys.filter(\n          (k: KeyInfo) => k.publicKeyMultibase === (keyId || NfcSdk.keyId)\n      );\n\n      if (filtered.length === 0) return null;\n\n      const keyInfo: KeyInfo = {\n          publicKeyMultibase: filtered[0].publicKeyMultibase,\n          index: filtered[0].index,\n      };\n\n      return keyInfo;\n  }\n\n  /**\n   * Sign one or more inputs using the private key stored on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signRequest Sign one or more inputs, typically hashes in hex format\n   * @returns A successful response after signing or an error\n   */\n  static async signUsingKey(\n      signRequest: SignRequest,\n      keyId?: string\n  ): Promise<SignResponse> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const { inputs } = signRequest;\n      const hashes = inputs.map((input) => input.data);\n      const data = await TangemSdk.signHashes(\n          hashes,\n          keyId || NfcSdk.keyId,\n          NfcSdk.cardId\n      );\n\n      // @ts-ignore\n      const signatures: SignOutputFromInput[] = data.signatures.map(\n          (signature: string, index: number) => {\n              return {\n                  input: { data: hashes[index], encoding: 'hex' },\n                  output: { data: signature, encoding: 'hex' },\n              };\n          }\n      );\n\n      const response: SignResponse = {\n          publicKeyMultibase: keyId,\n          signatures,\n      };\n\n      return response;\n  }\n\n  /**\n   * Add a proof to the supplied credential, using the private key on the NFC card and thus making\n   * it a Verifiable Credential. It allows for optional storage of the VC on the NFC card\n   *\n   * @param signCredentialRequest Signs one or more inputs, typically hashes in hex format\n   * @param keyId The Id of a key\n   * @returns A success response after signing\n   */\n  static async signCredential(\n      signCredentialRequest: SignCredentialRequest,\n      keyId?: string\n  ): Promise<SignCredentialResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const signedCredential = Sign.credential(signCredentialRequest.credential, keyId || NfcSdk.keyId);\n\n      return signedCredential;\n  }\n\n  /**\n   * Sign the supplied presentation using the key on the NFC card, adding a proof and making it\n   * a verifiable presentation\n   *\n   * @param signPresentationRequest Signs a presentation\n   * @param keyId The Id of a key\n   * @returns A successful response after signing\n   */\n  static async signPresentation(\n      signPresentationRequest: SignPresentationRequest,\n      keyId?: string\n  ): Promise<SignPresentationResponse> {\n      if (!keyId && !NfcSdk.keyId) {\n          throw new Error('keyId not provided, please use getKeys first');\n      }\n\n      const signedPresentation = Sign.presentation(\n          signPresentationRequest.presentation,\n          keyId || NfcSdk.keyId\n      );\n      return signedPresentation;\n  }\n\n  /**\n   * Store a credential\n   *\n   * @param credential The credential to be stored\n   * @param fileName The file name\n   * @returns A success response or null\n   */\n  static async storeCredential(\n      credential: any,\n      fileName: string\n  ): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const sCredential = JSON.stringify(credential);\n      const data = hexEncode(sCredential);\n\n      const files = await TangemSdk.readFiles(true);\n      // @ts-ignore\n      const fileCounter = files.length + 1;\n\n      await new Promise((resolve) => setTimeout(resolve, 4000));\n\n      const { startingSignature, finalizingSignature } =\n      await TangemSdk.prepareHashes(\n          NfcSdk.cardId,\n          data,\n          fileCounter,\n          fileName,\n          '11121314151617184771ED81F2BACF57479E4735EB1405083927372D40DA9E92' // TODO hardcoded key due to a Tangem SDK limitation\n      );\n\n      const file: OwnerFile = {\n          startingSignature,\n          finalizingSignature,\n          data,\n          fileName,\n          counter: fileCounter,\n          fileVisibility: FileVisibility.Public,\n      };\n\n      const response = await TangemSdk.writeFiles([file], NfcSdk.cardId);\n\n      return response;\n  }\n\n  /**\n   * Delete a specific stored Verifiable Credential\n   *\n   * @param fileName The file name of a credential\n   * @returns A successful response or null\n   */\n  static async deleteStoredCredential(\n      fileName: string\n  ): Promise<SuccessResponse | null> {\n      const files = await TangemSdk.readFiles(true, fileName);\n      // @ts-ignore\n\n      const indices = files.map((file: { index: any }) => file.index);\n\n      await TangemSdk.deleteFiles(indices);\n\n      const response: SuccessResponse = {\n          cardId: NfcSdk.cardId,\n      };\n\n      return response;\n  }\n\n  /**\n   * Return all the stored Verifiable Credentials\n   *\n   * @returns The stored credentials\n   */\n  static async getStoredCredentials(): Promise<StoredCredentialsResponse> {\n      const files = await TangemSdk.readFiles(true);\n\n      const credentials = files\n      // @ts-ignore\n          .map((item: { data: string; name: string }) => {\n              try {\n                  const decodeData = hexDecode(item.data);\n                  return JSON.parse(decodeData);\n              } catch {\n                  return null;\n              }\n          })\n          .filter((item: { data: string; name: string }) => item);\n\n      const response: StoredCredentialsResponse = { credentials };\n\n      return response;\n  }\n\n  /**\n   * Return a specific stored Verifiable Credential\n   *\n   * @param fileName The file name of a credential\n   * @returns The stored credential or null\n   */\n  static async getStoredCredential(\n      fileName: string\n  ): Promise<StoredCredentialsResponse | null> {\n      const files = await TangemSdk.readFiles(true, fileName);\n\n      const credentials = files\n      // @ts-ignore\n          .map((item: { data: string; name: string }) => {\n              try {\n                  const decodeData = hexDecode(item.data);\n                  return JSON.parse(decodeData);\n              } catch {\n                  return null;\n              }\n          })\n          .filter((item: { data: string; name: string }) => item);\n\n      const response: StoredCredentialsResponse = { credentials };\n\n      return response;\n  }\n\n  /**\n   * Set an access code on the card, if set all commands, including Scan Card, will require to submit this code\n   *\n   * @param accessCode The access code\n   * @returns A success response or null\n   */\n  static async setAccessCode(\n      accessCode: string\n  ): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const data = await TangemSdk.setAccessCode(accessCode, NfcSdk.cardId);\n\n      return data;\n  }\n\n  /**\n   * Set a passcode. Passcode protects signing and operations that can alter security parameters\n   *\n   * @param passcode The pass code\n   * @returns A success response or null\n   */\n  static async setPasscode(passcode: string): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const data = await TangemSdk.setPasscode(passcode, NfcSdk.cardId);\n\n      return data;\n  }\n\n  /**\n   * Reset both access code and passcode if they were set\n   *\n   * @returns A success response or null\n   */\n  static async resetUserCodes(): Promise<SuccessResponse | null> {\n      if (!NfcSdk.cardId) {\n          throw new Error('Please use scanCard first');\n      }\n\n      const data = await TangemSdk.resetUserCodes(NfcSdk.cardId);\n\n      return data;\n  }\n\n  /**\n   * Exposes public methods related to wallet operations\n   */\n  public static wallet: WalletType = {\n      scanCard: NfcSdk.scanCard,\n      setAccessCode: NfcSdk.setAccessCode,\n      setPasscode: NfcSdk.setPasscode,\n      resetUserCodes: NfcSdk.resetUserCodes,\n      createKey: NfcSdk.createKey,\n      getKeys: NfcSdk.getKeys,\n      getKey: NfcSdk.getKey,\n      deactivateKey: NfcSdk.deactivateKey,\n  };\n\n  /**\n   * Exposes public methods related to ssi operation\n   */\n  public static ssi: SsiType = {\n      signUsingKey: NfcSdk.signUsingKey,\n      signCredential: NfcSdk.signCredential,\n      signPresentation: NfcSdk.signPresentation,\n  };\n\n  /**\n   * Exposes public methods related to wallet operations\n   */\n  public static files: FilesType = {\n      storeCredential: NfcSdk.storeCredential,\n      getStoredCredentials: NfcSdk.getStoredCredentials,\n      getStoredCredential: NfcSdk.getStoredCredential,\n      deleteStoredCredential: NfcSdk.deleteStoredCredential,\n  };\n}\n\n// TODO: REFACTOR. Move the following 3 methods to a separate file with common functions\nconst hexEncode = (input: string): string => {\n    const json = JSON.stringify(input);\n    const response = json\n        .split('')\n        .map((_c, i) => ('000' + json.charCodeAt(i).toString(16)).slice(-4))\n        .join('');\n\n    return response;\n};\n\nconst hexDecode = (input: string): string => {\n    const hexes = input.match(/.{1,4}/g) || [];\n    const response = hexes\n        .map((c) => String.fromCharCode(parseInt(c, 16)))\n        .join('');\n\n    return response;\n};\n\nexport * from './types';\nexport { EllipticCurve } from 'tangem-sdk';\n"],"mappings":"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"}