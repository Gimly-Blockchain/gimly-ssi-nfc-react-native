{"version":3,"names":["TangemSdk","EllipticCurve","NfcSdkModule","NfcSdk","scanCard","initialMessage","data","cardId","batchId","cardPublicKey","cardPublicKeyMultibase","supportedCurves","curves","firmwareVersion","major","minor","type","hotFix","patch","cardInfo","response","createKey","curve","ellipticCurve","Secp256k1","Ed25519","Secp256r1","createWallet","keyInfo","publicKeyMultibase","wallet","publicKey","index","id","keys","deactivateKey","keyId","purgeWallet","console","log","getKeys","wallets","map","getKey","keyResult","filtered","filter","k","length","signUsingKey","signRequest","inputs","hashes","input","signHashes","signatures","signature","encoding","output","signCredential","signCredentialRequest","verifiableCredential","file","JSON","stringify","files","requestResponse","writeOwnerFile","issuanceDate","proof","created","proofPurpose","verificationMethod","jws","credentialSubject","issuer","expirationDate","credentialStatus","storageId","err","signPresentation","signPresentationRequest","verifiableCredential_1","verifiablePresentation","deleteStoredCredential","credentialId","indicesToDelete","deleteFiles","getStoredCredentials","readPrivateFiles","indices","undefined","readFiles","credentials","getStoredCredential","credential","setAccessCode","accessCode","setPasscode","passcode","resetUserCodes"],"sources":["index.tsx"],"sourcesContent":["import TangemSdk from 'tangem-sdk-react-native';\nimport type {\n  SuccessResponse,\n  Message,\n  File\n} from 'tangem-sdk-react-native';\n\nimport { EllipticCurve } from 'tangem-sdk-react-native';\n\nimport type {\n  CardInfoResult,\n  CardInfo,\n  KeyInfo,\n  KeyResults,\n  SignCredentialRequest,\n  SignCredentialResponse,\n  SignPresentationRequest,\n  SignPresentationResponse,\n  SignRequest,\n  SignResponse,\n  StoredCredentialsResponse,\n  VerifiableCredential,\n  StoredCredentialResponse,\n  SignOutputFromInput,\n} from './types';\n\nexport const NfcSdkModule = TangemSdk;\n\nexport default class NfcSdk {\n\n  /**\n   * Scan the NFC card\n   *\n   * @param initialMessage The message to display\n   * @returns The card information retrieved with the scan\n   */\n  public static async scanCard(\n    initialMessage?: Message,\n  ): Promise<CardInfoResult> {\n    const data = await TangemSdk.scanCard(initialMessage);\n\n    const {\n      cardId,\n      batchId,\n      cardPublicKey: cardPublicKeyMultibase,\n      supportedCurves: curves,\n      firmwareVersion: {major, minor, type, hotFix: patch},\n    } = data;\n\n    const cardInfo: CardInfo = {\n      curves,\n      firmwareVersion: {\n        major,\n        minor,\n        type,\n        patch,\n      },\n    };\n\n    const response: CardInfoResult = {\n      cardId,\n      batchId,\n      cardPublicKeyMultibase,\n      cardInfo\n    };\n\n    return response;\n  }\n\n  /**\n   * Create an asymmetric keypair on the NFC card\n   *\n   * @param cardId The Id of a card\n   * @param curve A string with the elliptic Curve\n   * @returns The results of the created key\n   */\n  public static async createKey(\n    cardId: string,\n    curve: string,\n  ): Promise<KeyResults> {\n    let ellipticCurve = EllipticCurve.Secp256k1; //default one\n\n    if (curve === 'secp256k1') ellipticCurve = EllipticCurve.Secp256k1;\n    if (curve === 'ed25519') ellipticCurve = EllipticCurve.Ed25519;\n    if (curve === 'secp256r1') ellipticCurve = EllipticCurve.Secp256r1;\n\n    const data = await TangemSdk.createWallet(ellipticCurve, cardId);\n    // data = {\"cardId\":\"AC79000000000004\",\"wallet\":{\"totalSignedHashes\":0,\"index\":8,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"037C58B433A9063575C12232A0763DCC09423C8180E977AE9F8C527F462DBC4B5C\",\"chainCode\":\"CB2C5D06D739E6D42321A8E456B3DF2E70308ECE75DF6EAE830D4D0B2B3F887B\",\"settings\":{\"isPermanent\":false}}}\n\n    const keyInfo: KeyInfo = {\n      publicKeyMultibase: data.wallet.publicKey,\n      index: data.wallet.index\n    };\n\n    const response: KeyResults = {\n      id: data.cardId,\n      keys: [keyInfo], //TODO we have to check if we only have to return the new key or all of them\n    };\n\n    // response = {\"id\":\"AC79000000000004\",\"keys\":[{\"publicKey\":\"031174DA6836421B1CE23827D8F317B219F3AA4660A5C0A14161A30CD0366C89C5\",\"index\":11}]}\n    return response;\n  }\n\n  /**\n   * Deactivate a key by card index, public key, or DID key\n   *\n   * @param cardId The Id of a card\n   * @param keyId The Key index, public key, or DID/Verification method Key ID\n   * @returns null\n   */\n  public static async deactivateKey(\n    cardId: string,\n    keyId: string,\n  ): Promise<null> {\n    // params = AC79000000000004 02AE76BE4E5A9308B3B272B396E5A0C7307C9CC1B74ED00D2E385215E7965B4A45\n\n    const data = await TangemSdk.purgeWallet(keyId, cardId);\n    console.log(data)\n    // data = {cardId: 'AC79000000000004'}\n\n    return null; // TODO Check the method response on the terminal API\n  }\n\n  /**\n   * Get all keys by card Id\n   *\n   * @param initialMessage The message to display\n   * @param cardId The Id of a card\n   * @returns The keys retrieved from the card\n   */\n  public static async getKeys(\n    initialMessage: Message, //TODO the initialMessage key is not defined on the Terminal API\n    cardId?: string,\n  ): Promise<KeyResults> {\n    // params = '', AC79000000000004\n    console.log(cardId);\n    const data = await TangemSdk.scanCard(initialMessage);\n    // {\"backupStatus\":{\"status\":\"noBackup\"},\"isAccessCodeSet\":false,\"linkedTerminalStatus\":\"none\",\"supportedCurves\":[\"secp256k1\",\"ed25519\",\"secp256r1\"],\"cardPublicKey\":\"0297B5F98CFC498457778B7999F2B7BFEC6480D6A3DE4E0531CD8223C048AF751D\",\"settings\":{\"maxWalletsCount\":20,\"isLinkedTerminalEnabled\":true,\"isFilesAllowed\":true,\"supportedEncryptionModes\":[\"strong\",\"fast\",\"none\"],\"securityDelay\":5000,\"isBackupAllowed\":true,\"isSettingAccessCodeAllowed\":false,\"isResettingUserCodesAllowed\":true,\"isHDWalletAllowed\":true,\"isSettingPasscodeAllowed\":true},\"issuer\":{\"name\":\"TANGEM SDK\",\"publicKey\":\"025F16BD1D2EAFE463E62A335A09E6B2BBCBD04452526885CB679FC4D27AF1BD22\"},\"firmwareVersion\":{\"minor\":52,\"patch\":0,\"major\":4,\"stringValue\":\"4.52d SDK\",\"type\":\"d SDK\"},\"batchId\":\"AC01\",\"isPasscodeSet\":false,\"manufacturer\":{\"name\":\"TANGEM\",\"manufactureDate\":\"2021-03-15\",\"signature\":\"C02845DC5AEDC168A63FEBC41BE0A0659CA0D237AD05B8FDDFE4525DD144BB7A04517CE3EB1E20448715EF5D85BE54482EBDDC471545F786E274FF7AFA9CECC2\"},\"attestation\":{\"cardKeyAttestation\":\"failed\",\"walletKeysAttestation\":\"skipped\",\"firmwareAttestation\":\"skipped\",\"cardUniquenessAttestation\":\"skipped\"},\"cardId\":\"AC79000000000004\",\"wallets\":[{\"totalSignedHashes\":0,\"index\":0,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"02739E131C76098A6C577BBF86E3A7F94C3C4F661FA4D76B81D21CAFB343A91B77\",\"chainCode\":\"6179C2B84CB428B83FD37C88F41C157874F2DA457ECE780AB8D6683B116F3572\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":1,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"ed25519\",\"publicKey\":\"A983FF0ACA1C27BCEC69A073A6888C92A4C7DECFA99DEB11573452CF882EC700\",\"chainCode\":\"E438B6C676FF79F7CCE8D7277207C72AB35473459977A110F040D4467E3DE3B9\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":2,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"02EE0265FB7B23F19739CD9706E332209E28BB10C046DB0F984DF24A8B877BCA40\",\"chainCode\":\"5EBA4F6110925453AA5B46E812716F9212A63DAB146D0D8B7C8E07AF08A1B47E\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":3,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"ed25519\",\"publicKey\":\"39BA669D2C50935E0C4C60492FBA574B6A7740DFABB9328EA9792D57D366ADB8\",\"chainCode\":\"66E1ABB3C11257EE7D49F6F461866A0A538A3A724959B29EE04F25767268391A\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":4,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"ed25519\",\"publicKey\":\"8B69ECCA96784F4CE551200E26AF75352F07C0C2952AF97E38FB4C773ED0B4A9\",\"chainCode\":\"F2092E9233E628AB8A703A750860D1CA6C70DEC75576A474018A282E04E69661\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":5,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"ed25519\",\"publicKey\":\"4C53B4C6736F9A43DBE76093E71EFB95C9182739EC8B2E52DFE8E86760956FD5\",\"chainCode\":\"B9149BB084C97DD33F679932DDFE13C5419F2A00F112939ED5C4D9129F228A09\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":6,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"ed25519\",\"publicKey\":\"89AC5E434B3E0697F5F70DD2DB9D576E74224F6886830C3963EA0A06A8DE359B\",\"chainCode\":\"472165513BE599F178DA6E3F29149ACDE8735A46D4050CDD8A0673AE2405261D\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":7,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"ed25519\",\"publicKey\":\"3285782D56275FB013361B704B70F6D6FB19933798CA9D8528D94E67EAE07BFB\",\"chainCode\":\"836922CB3F80C6CBFE2B1881A53910CF0B468B06638FB3F0A4A2C2AAAF1C8144\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":8,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"037C58B433A9063575C12232A0763DCC09423C8180E977AE9F8C527F462DBC4B5C\",\"chainCode\":\"CB2C5D06D739E6D42321A8E456B3DF2E70308ECE75DF6EAE830D4D0B2B3F887B\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":9,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"039D37D865929C7F5FF702DD9A1922F7C97F3BE4A8E9D6429B9795F002FB1E6C70\",\"chainCode\":\"E0C501DC9375E90C498FB036E79577627B2BEA68B0FE2B956210A9EAE069BAC9\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":10,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"02143DFE2B1F54B6643872B3AF55929B7D5D2F6CD0684E2B0AAC5AB961A794B63D\",\"chainCode\":\"1BBDB854DAA7F3EE22FBBC3AF10917B44AA3924ED02F99C850590641B2931050\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":11,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"031174DA6836421B1CE23827D8F317B219F3AA4660A5C0A14161A30CD0366C89C5\",\"chainCode\":\"F8BB928964B2145A6BACE5CB1EF009C422F1086CF18738E1B1014F7B3F2D7A8D\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":12,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"0314CB0FD85EDA6135E0A1F68780A2667C35AA1FA7570AA987C69536F57E187EFD\",\"chainCode\":\"991FD4D2D48E0F3729ACD3F69A9BA9C543AE06D1243094773070A7E32738D343\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":13,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"03E631AA921C3C46543ECC7AF668921859B7A1FEBA2C80419776B3AA6AC8553B13\",\"chainCode\":\"95B2716896D4B51A839087984F624A90FF8AE0A0AEF5FF62259A7D5C02909579\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":14,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"03D239B6ED0C000A82A2F7B814395E3F3BF8E2982B0A52D8DAE6F794100281C518\",\"chainCode\":\"547FCDE33BBADE43FB3C087F010E8555B1433A08EE1DEF18B2F17BAE855E2429\",\"settings\":{\"isPermanent\":false}},{\"totalSignedHashes\":0,\"index\":15,\"hasBackup\":false,\"derivedKeys\":[],\"curve\":\"secp256k1\",\"publicKey\":\"031B82821E3410B9E54A991A818E0B76F3B1D9FF8F4AC42B85E0C8BE40FBA4E134\",\"chainCode\":\"125C6794DD11A7D55DDB35721221EFD4993728C200FDDA01EA467E92DBD09245\",\"settings\":{\"isPermanent\":false}}]}\n    const keys = data.wallets\n      ? data.wallets.map(wallet => {\n          const keyInfo: KeyInfo = {\n            publicKeyMultibase: wallet.publicKey,\n            index: wallet.index,\n            // status: '??', ---> TODO: we're not using this prop here and the terminal api\n          };\n          return keyInfo;\n        })\n      : [];\n    const response: KeyResults = {\n      id: data.cardId,\n      keys,\n    };\n    // response = {\"id\":\"AC79000000000004\",\"keys\":[{\"publicKey\":\"02739E131C76098A6C577BBF86E3A7F94C3C4F661FA4D76B81D21CAFB343A91B77\",\"index\":0},{\"publicKey\":\"A983FF0ACA1C27BCEC69A073A6888C92A4C7DECFA99DEB11573452CF882EC700\",\"index\":1},{\"publicKey\":\"02EE0265FB7B23F19739CD9706E332209E28BB10C046DB0F984DF24A8B877BCA40\",\"index\":2},{\"publicKey\":\"39BA669D2C50935E0C4C60492FBA574B6A7740DFABB9328EA9792D57D366ADB8\",\"index\":3},{\"publicKey\":\"8B69ECCA96784F4CE551200E26AF75352F07C0C2952AF97E38FB4C773ED0B4A9\",\"index\":4},{\"publicKey\":\"4C53B4C6736F9A43DBE76093E71EFB95C9182739EC8B2E52DFE8E86760956FD5\",\"index\":5},{\"publicKey\":\"89AC5E434B3E0697F5F70DD2DB9D576E74224F6886830C3963EA0A06A8DE359B\",\"index\":6},{\"publicKey\":\"3285782D56275FB013361B704B70F6D6FB19933798CA9D8528D94E67EAE07BFB\",\"index\":7},{\"publicKey\":\"037C58B433A9063575C12232A0763DCC09423C8180E977AE9F8C527F462DBC4B5C\",\"index\":8},{\"publicKey\":\"039D37D865929C7F5FF702DD9A1922F7C97F3BE4A8E9D6429B9795F002FB1E6C70\",\"index\":9},{\"publicKey\":\"02143DFE2B1F54B6643872B3AF55929B7D5D2F6CD0684E2B0AAC5AB961A794B63D\",\"index\":10},{\"publicKey\":\"031174DA6836421B1CE23827D8F317B219F3AA4660A5C0A14161A30CD0366C89C5\",\"index\":11},{\"publicKey\":\"0314CB0FD85EDA6135E0A1F68780A2667C35AA1FA7570AA987C69536F57E187EFD\",\"index\":12},{\"publicKey\":\"03E631AA921C3C46543ECC7AF668921859B7A1FEBA2C80419776B3AA6AC8553B13\",\"index\":13},{\"publicKey\":\"03D239B6ED0C000A82A2F7B814395E3F3BF8E2982B0A52D8DAE6F794100281C518\",\"index\":14},{\"publicKey\":\"031B82821E3410B9E54A991A818E0B76F3B1D9FF8F4AC42B85E0C8BE40FBA4E134\",\"index\":15}]}\n    return response;\n  }\n\n  /**\n   * Get a key by Card Id and keyId\n   *\n   * @param initialMessage The message to display\n   * @param cardId The Id of a card\n   * @param keyId The Id of a key\n   * @returns The key retrieved from the card\n   */\n  public static async getKey(\n    initialMessage: Message,\n    cardId: string,\n    keyId: string,\n  ): Promise<KeyInfo|null> {\n    // params = '', AC79000000000004, 02EE0265FB7B23F19739CD9706E332209E28BB10C046DB0F984DF24A8B877BCA40\n\n    const keyResult: KeyResults = await this.getKeys(initialMessage, cardId);\n    const {keys} = keyResult;\n\n    const filtered = keys.filter(\n      (k: KeyInfo) => k.publicKeyMultibase === keyId,\n    );\n\n    if (filtered.length === 0) {\n      // TODO: review what is the best response when we can't find any key\n      return null;\n    }\n\n    const keyInfo: KeyInfo = {\n      publicKeyMultibase: filtered[0].publicKeyMultibase,\n      index: filtered[0].index,\n      // status: '??', ---> TODO: we're not using this prop here and the terminal api\n    };\n\n    return keyInfo;\n  }\n\n  /**\n   * Sign one or more inputs using the private key stored on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signRequest Sign one or more inputs, typically hashes in hex format\n   * @param cardId The Id of a card\n   * @returns A successful response after signing or an error\n   */\n  public static async signUsingKey(\n    keyId: string,\n    signRequest: SignRequest,\n    cardId: string,\n  ): Promise<SignResponse> {\n    // params = 02EE0265FB7B23F19739CD9706E332209E28BB10C046DB0F984DF24A8B877BCA40 {\"inputs\":[{\"data\":\"44617461207573656420666f722068617368696e67\"},{\"data\":\"4461746120666f7220757365642068617368696e67\"}]} AC79000000000004\n\n    const {inputs} = signRequest;\n    const hashes = inputs.map(input => input.data);\n\n    const data = await TangemSdk.signHashes(hashes, keyId, cardId);\n    // data = {\"totalSignedHashes\":12,\"cardId\":\"AC79000000000004\",\"signatures\":[\"64B4BB5428A78605E2E1AD9FE1F7CDFE336094C8F1A2D0583D16C6591CACCB7775E142B0B32D8DC19868892DC9EB2EC50CE8657C24AB79A97B45A535A6455958\",\"86F2980929F858170F89D39F9E3D07D8ABEC6F5FFAD9692D2FBF4725C95F091C14EEF455BC559F2BB76ECC9BCB6E90CB93C305D7D4ABAE3195D0463B6D5E9182\"]}\n\n    // TODO: probablemente data este mal digamos el objeto parece estar bien, pero signHashes responde con un array de datos [SignHashResponse] no un solo dato como parece que se implemento\n    // y por tando da multiples errores de typescript.\n    const signatures: SignOutputFromInput[] = data?.[0].signatures.map(\n      (signature, index) => {\n        return {\n          input: {data: hashes[index], encoding: 'hex'},\n          output: {data: signature, encoding: 'hex'},\n        };\n      },\n    );\n\n    const response: SignResponse = {\n      publicKeyMultibase: keyId,\n      signatures,\n    };\n    // response = {\"publicKeyMultibase\":\"02EE0265FB7B23F19739CD9706E332209E28BB10C046DB0F984DF24A8B877BCA40\",\"signatures\":[{\"input\":{\"data\":\"44617461207573656420666f722068617368696e67\",\"encoding\":\"hex\"},\"output\":{\"data\":\"64B4BB5428A78605E2E1AD9FE1F7CDFE336094C8F1A2D0583D16C6591CACCB7775E142B0B32D8DC19868892DC9EB2EC50CE8657C24AB79A97B45A535A6455958\",\"encoding\":\"hex\"}},{\"input\":{\"data\":\"4461746120666f7220757365642068617368696e67\",\"encoding\":\"hex\"},\"output\":{\"data\":\"86F2980929F858170F89D39F9E3D07D8ABEC6F5FFAD9692D2FBF4725C95F091C14EEF455BC559F2BB76ECC9BCB6E90CB93C305D7D4ABAE3195D0463B6D5E9182\",\"encoding\":\"hex\"}}]}\n\n    return response;\n  }\n\n  /**\n   * Add a proof to the supplied credential, using the private key on the NFC card and thus making it a Verifiable Credential. It allows for optional storage of the VC on the NFC card\n   *\n   * @param keyId The Id of a key\n   * @param signCredentialRequest Signs one or more inputs, typically hashes in hex format\n   * @param cardId The Id of a card\n   * @returns A success response after signing\n   */\n  public static async signCredential(\n    keyId: string,\n    signCredentialRequest: SignCredentialRequest,\n    cardId: string,\n  ): Promise<SignCredentialResponse|null> {\n    // TODO: we have to sign the credential and store it if that is requested. Not sure how to convert that VC to a hash in hex format, so we can use the sign method.\n    console.log(keyId, signCredentialRequest, cardId);\n    // TODO: hadcoded VC\n    const verifiableCredential = {\n      \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://www.w3.org/2018/credentials/examples/v1\"\n      ],\n      \"id\": \"http://example.gov/credentials/3732\",\n      \"type\": [\n        \"VerifiableCredential\",\n        \"UniversityDegreeCredential\"\n      ],\n      \"issuer\": {\n        \"id\": \"did:web:vc.transmute.world\"\n      },\n      \"issuanceDate\": \"2020-03-10T04:24:12.164Z\",\n      \"credentialSubject\": {\n        \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n        \"degree\": {\n          \"type\": \"BachelorDegree\",\n          \"name\": \"Bachelor of Science and Arts\"\n        }\n      },\n      \"proof\": {\n        \"type\": \"JsonWebSignature2020\",\n        \"created\": \"2020-03-21T17:51:48Z\",\n        \"verificationMethod\": \"did:web:vc.transmute.world#_Qq0UL2Fq651Q0Fjd6TvnYE-faHiOpRlPVQcY_-tA4A\",\n        \"proofPurpose\": \"assertionMethod\",\n        \"jws\": \"eyJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCJdLCJhbGciOiJFZERTQSJ9..OPxskX37SK0FhmYygDk-S4csY_gNhCUgSOAaXFXDTZx86CmI5nU9xkqtLWg-f4cqkigKDdMVdtIqWAvaYx2JBA\"\n      }\n    }\n    // TODO: data should be a string representing the VC, is this a json or a hash encrypted string.\n    const file: File = {\n      data: JSON.stringify(verifiableCredential),\n    }\n    const files: File[] = [file]\n    try {\n      const requestResponse = await TangemSdk.writeOwnerFile(files, keyId, cardId)\n      // TODO: check response to convert to desired format response\n      console.log(requestResponse)\n      return {\n        verifiableCredential:  {\n          issuanceDate: '',\n          proof:  {\n            type: '',\n            created: '',\n            proofPurpose: '',\n            verificationMethod: '',\n            jws: '',\n          },\n          \"@context\": [],\n          id: '',\n          type: [],\n          credentialSubject: { id: ''},\n          issuer: '',\n          expirationDate: '',\n          credentialStatus:  {\n            id: '',\n            type: '',\n          },\n        },\n        storageId: '',\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  /**\n   * Sign the supplied presentation using the key on the NFC card, adding a proof and making it a verifiable presentation\n   *\n   * @param keyId The Id of a key\n   * @param signPresentationRequest Signs a presentation\n   * @param cardId The Id of a card\n   * @returns A successful response after signing\n   */\n  public static async signPresentation(\n    keyId: string,\n    signPresentationRequest: SignPresentationRequest,\n    cardId: string,\n  ): Promise<SignPresentationResponse> {\n    console.log(keyId, signPresentationRequest, cardId);\n    // TODO: Following code are hardcoded responses, expected as terminal api structure.\n    const verifiableCredential_1: VerifiableCredential = {\n      issuanceDate: '',\n      proof: {\n        type: '',\n        created: '',\n        proofPurpose: '',\n        verificationMethod: '',\n        jws: '',\n      },\n      '@context': [],\n      id: '',\n      type: [],\n      credentialSubject: {id: ''},\n      issuer: '',\n      expirationDate: '',\n      credentialStatus: {id: '', type: ''},\n    };\n    const response:SignPresentationResponse = {\n      verifiablePresentation: {\n        proof: {\n          type: '',\n          created: '',\n          proofPurpose: '',\n          verificationMethod: '',\n          jws: '',\n        },\n        \"@context\": [],\n        type: \"\",\n        verifiableCredential: [verifiableCredential_1],\n      }\n    }\n    return response;\n  }\n\n  /**\n   * Delete a specific stored Verifiable Credential\n   *\n   * @param credentialId The Id of a credential\n   * @param cardId The Id of a card\n   * @returns A successful response or null\n   */\n  public static async deleteStoredCredential(\n    credentialId: string,\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    console.log(credentialId)\n    // TODO: as first parameter deleteFiles espects \"indicesToDelete\" which is an array of numbers. Investigate or ask correlation between credentialId(string) <-> indicesToDelete(array of numbers)\n    // TODO: dummy const to bypass tsx errors\n    const indicesToDelete: number[] = []; // Indexes of files that should be deleted. If undefined - deletes all files from card\n\n    const data = await TangemSdk.deleteFiles(indicesToDelete, cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /**\n   * Return all the stored Verifiable Credentials\n   *\n   * @param cardId The Id of a card\n   * @returns The stored credentials\n   */\n  public static async getStoredCredentials(\n    cardId: string,\n  ): Promise<StoredCredentialsResponse> {\n    const readPrivateFiles: boolean = true;\n    const indices = undefined;\n    const data = await TangemSdk.readFiles(readPrivateFiles, indices, cardId);\n    console.log(data);\n    // TODO: convert data to credentials as expected by terminal format\n    const response: StoredCredentialsResponse = {\n      credentials: [\n        {\n          \"@context\": [\"\"],\n          id: \"\",\n          type: [\"\"],\n          credentialSubject: {\n            id: \"\"\n          },\n          issuer: \"\",\n          issuanceDate: \"\",\n          expirationDate: \"\",\n          credentialStatus: {\n            id: \"\",\n            type: \"\",\n          },\n          proof: {\n            type: \"\",\n            created: \"\",\n            verificationMethod: \"\",\n            proofPurpose: \"\",\n            jws: \"\"\n          }\n        }\n      ]\n    }\n    return response;\n  }\n\n  /**\n   * Return a specific stored Verifiable Credential\n   *\n   * @param cardId The Id of a card\n   * @param credentialId  The Id of a credential\n   * @returns The stored credential or null\n   */\n  public static async getStoredCredential(\n    cardId: string,\n    credentialId: string,\n  ): Promise<StoredCredentialResponse|null> {\n    const data = await this.getStoredCredentials(cardId);\n    const filtered = data.credentials.filter(\n      credential => credential.id === credentialId,\n    );\n    if (filtered.length === 0) {\n      return null;\n    }\n    return {\n      credential: filtered[0],\n    };\n  }\n\n  /**\n   * Set an access code on the card, if set all commands, including Scan Card, will require to submit this code\n   *\n   * @param accessCode The access code\n   * @param cardId The Id of a card\n   * @returns A success response or null\n   */\n  public static async setAccessCode(\n    accessCode: string,\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    const data = await TangemSdk.setAccessCode(accessCode, cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /**\n   * Set a passcode. Passcode protects signing and operations that can alter security parameters\n   *\n   * @param passcode The pass code\n   * @param cardId The Id of a card\n   * @returns A success response or null\n   */\n  public static async setPasscode(\n    passcode: string,\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    const data = await TangemSdk.setPasscode(passcode, cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /**\n   * Reset both access code and passcode if they were set\n   *\n   * @param cardId The Id of a card\n   * @returns A success response or null\n   */\n  public static async resetUserCodes(\n    cardId: string,\n  ): Promise<SuccessResponse | null> {\n    const data = await TangemSdk.resetUserCodes(cardId);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n}\n\nexport * from './types';\n"],"mappings":"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"}